/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_kcoreJNI = NULL;
    jmethodID director_method_ids[3];
  }
}

#include "kuzzle.cpp"
#include "collection.cpp"
#include "room.cpp"
#include "document.cpp"
#include "index.cpp"
#include "server.cpp"


#include <string>


#include "listeners.hpp"
#include "exceptions.hpp"
#include "event_emitter.hpp"
#include "kuzzle.hpp"
#include "collection.hpp"
#include "room.hpp"
#include "document.hpp"
#include "index.hpp"
#include "server.hpp"
#include <assert.h>
#include <ffi.h>

SWIGINTERN options *new_options(){
        options *o = kuzzle_new_options();
        return o;
    }
SWIGINTERN void delete_options(options *self){
        free(self);
    }

#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< kuzzleio::Document * >::const_reference std_vector_Sl_kuzzleio_Document_Sm__Sg__get(std::vector< kuzzleio::Document * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_kuzzleio_Document_Sm__Sg__set(std::vector< kuzzleio::Document * > *self,int i,std::vector< kuzzleio::Document * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN json_object *new_json_object(){
        json_object *j = json_object_new_object();
        return j;
    }
SWIGINTERN void delete_json_object(json_object *self){
        kuzzle_free_json_object(self);
    }
SWIGINTERN json_object *json_object_put__SWIG_0(json_object *self,char *key,char *content){
        kuzzle_json_put(self, key, content, 0);
        return self;
    }
SWIGINTERN json_object *json_object_put__SWIG_1(json_object *self,char *key,int content){
        kuzzle_json_put(self, key, &content, 1);
        return self;
    }
SWIGINTERN json_object *json_object_put__SWIG_2(json_object *self,char *key,double content){
        kuzzle_json_put(self, key, &content, 2);
        return self;
    }
SWIGINTERN json_object *json_object_put__SWIG_3(json_object *self,char *key,bool content){
        kuzzle_json_put(self, key, &content, 3);
        return self;
    }
SWIGINTERN json_object *json_object_put__SWIG_4(json_object *self,char *key,json_object *content){
        kuzzle_json_put(self, key, content, 4);
        return self;
    }
SWIGINTERN char *json_object_getString(json_object *self,char *key){
        return kuzzle_json_get_string(self, key);
    }
SWIGINTERN int json_object_getInt(json_object *self,char *key){
        return kuzzle_json_get_int(self, key);
    }
SWIGINTERN double json_object_getDouble(json_object *self,char *key){
        return kuzzle_json_get_double(self, key);
    }
SWIGINTERN bool json_object_getBoolean(json_object *self,char *key){
        return kuzzle_json_get_bool(self, key);
    }
SWIGINTERN json_object *json_object_getJsonObject(json_object *self,char *key){
        return kuzzle_json_get_json_object(self, key);
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "kcore_wrap.h"

SwigDirector_NotificationListener::SwigDirector_NotificationListener(JNIEnv *jenv) : kuzzleio::NotificationListener(), Swig::Director(jenv) {
}

SwigDirector_NotificationListener::~SwigDirector_NotificationListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_NotificationListener::onMessage(notification_result *arg0) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method kuzzleio::NotificationListener::onMessage.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((notification_result **)&jarg0) = (notification_result *) arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_kcoreJNI, Swig::director_method_ids[0], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in kuzzleio::NotificationListener::onMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NotificationListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onMessage", "(Lio/kuzzle/sdk/notification_result;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/kuzzle/sdk/NotificationListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_EventListener::SwigDirector_EventListener(JNIEnv *jenv) : kuzzleio::EventListener(), Swig::Director(jenv) {
}

SwigDirector_EventListener::~SwigDirector_EventListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_EventListener::trigger(json_object *arg0) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method kuzzleio::EventListener::trigger.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((json_object **)&jarg0) = (json_object *) arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_kcoreJNI, Swig::director_method_ids[1], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in kuzzleio::EventListener::trigger ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_EventListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "trigger", "(Lio/kuzzle/sdk/JsonObject;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/kuzzle/sdk/EventListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SubscribeListener::SwigDirector_SubscribeListener(JNIEnv *jenv) : kuzzleio::SubscribeListener(), Swig::Director(jenv) {
}

SwigDirector_SubscribeListener::~SwigDirector_SubscribeListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_SubscribeListener::onSubscribe(room_result *arg0) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method kuzzleio::SubscribeListener::onSubscribe.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((room_result **)&jarg0) = (room_result *) arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_kcoreJNI, Swig::director_method_ids[2], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in kuzzleio::SubscribeListener::onSubscribe ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SubscribeListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onSubscribe", "(Lio/kuzzle/sdk/room_result;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/kuzzle/sdk/SubscribeListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_query_1object_1query_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  query_object *arg1 = (query_object *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(query_object **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->query = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_query_1object_1query_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  query_object *arg1 = (query_object *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_object **)&jarg1; 
  result = (json_object *) ((arg1)->query);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_query_1object_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  query_object *arg1 = (query_object *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_object **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_kuzzle_sdk_kcoreJNI_query_1object_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  query_object *arg1 = (query_object *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_object **)&jarg1; 
  result = (unsigned long long) ((arg1)->timestamp);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_query_1object_1request_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  query_object *arg1 = (query_object *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->request_id;
    if (arg2) {
      arg1->request_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->request_id, (const char *)arg2);
    } else {
      arg1->request_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_query_1object_1request_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  query_object *arg1 = (query_object *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_object **)&jarg1; 
  result = (char *) ((arg1)->request_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1query_1object(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  query_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (query_object *)new query_object();
  *(query_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1query_1object(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  query_object *arg1 = (query_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(query_object **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_offline_1queue_1queries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  offline_queue *arg1 = (offline_queue *) 0 ;
  query_object **arg2 = (query_object **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(offline_queue **)&jarg1; 
  arg2 = *(query_object ***)&jarg2; 
  if (arg1) (arg1)->queries = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_offline_1queue_1queries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  offline_queue *arg1 = (offline_queue *) 0 ;
  query_object **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(offline_queue **)&jarg1; 
  result = (query_object **) ((arg1)->queries);
  *(query_object ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_offline_1queue_1queries_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  offline_queue *arg1 = (offline_queue *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(offline_queue **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->queries_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_offline_1queue_1queries_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  offline_queue *arg1 = (offline_queue *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(offline_queue **)&jarg1; 
  result =  ((arg1)->queries_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1offline_1queue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  offline_queue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (offline_queue *)new offline_queue();
  *(offline_queue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1offline_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  offline_queue *arg1 = (offline_queue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(offline_queue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1request_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->request_id;
    if (arg2) {
      arg1->request_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->request_id, (const char *)arg2);
    } else {
      arg1->request_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1request_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->request_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1controller_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->controller;
    if (arg2) {
      arg1->controller = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->controller, (const char *)arg2);
    } else {
      arg1->controller = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1controller_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->controller);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1action_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->action;
    if (arg2) {
      arg1->action = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->action, (const char *)arg2);
    } else {
      arg1->action = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1action_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->action);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->index;
    if (arg2) {
      arg1->index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->index, (const char *)arg2);
    } else {
      arg1->index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->collection;
    if (arg2) {
      arg1->collection = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->collection, (const char *)arg2);
    } else {
      arg1->collection = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->collection);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1body_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->body = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1body_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (json_object *) ((arg1)->body);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->id;
    if (arg2) {
      arg1->id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->id, (const char *)arg2);
    } else {
      arg1->id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1from_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->from = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1from_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (long) ((arg1)->from);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (long) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1scroll_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scroll;
    if (arg2) {
      arg1->scroll = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scroll, (const char *)arg2);
    } else {
      arg1->scroll = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1scroll_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->scroll);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1scroll_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scroll_id;
    if (arg2) {
      arg1->scroll_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scroll_id, (const char *)arg2);
    } else {
      arg1->scroll_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1scroll_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->scroll_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1strategy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->strategy;
    if (arg2) {
      arg1->strategy = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->strategy, (const char *)arg2);
    } else {
      arg1->strategy = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1strategy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->strategy);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1expires_1in_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->expires_in = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1expires_1in_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (unsigned long long) ((arg1)->expires_in);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1volatiles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->volatiles = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1volatiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (json_object *) ((arg1)->volatiles);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1scope_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scope;
    if (arg2) {
      arg1->scope = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scope, (const char *)arg2);
    } else {
      arg1->scope = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1scope_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->scope);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->state;
    if (arg2) {
      arg1->state = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->state, (const char *)arg2);
    } else {
      arg1->state = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->state);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->user;
    if (arg2) {
      arg1->user = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->user, (const char *)arg2);
    } else {
      arg1->user = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->user);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (long) ((arg1)->start);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1stop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->stop = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1stop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (long) ((arg1)->stop);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (long) ((arg1)->end);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1bit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->bit = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1bit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (unsigned char) ((arg1)->bit);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->member;
    if (arg2) {
      arg1->member = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->member, (const char *)arg2);
    } else {
      arg1->member = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->member);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1member1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->member1;
    if (arg2) {
      arg1->member1 = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->member1, (const char *)arg2);
    } else {
      arg1->member1 = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1member1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->member1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1member2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->member2;
    if (arg2) {
      arg1->member2 = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->member2, (const char *)arg2);
    } else {
      arg1->member2 = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1member2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->member2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1members_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->members = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1members_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char **) ((arg1)->members);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1members_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->members_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1members_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result =  ((arg1)->members_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1lon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lon = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1lon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (double) ((arg1)->lon);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1lat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lat = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1lat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (double) ((arg1)->lat);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (double) ((arg1)->distance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1unit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->unit;
    if (arg2) {
      arg1->unit = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->unit, (const char *)arg2);
    } else {
      arg1->unit = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1unit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->unit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1options_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->options = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (json_object *) ((arg1)->options);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1keys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->keys = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1keys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char **) ((arg1)->keys);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1keys_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->keys_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1keys_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result =  ((arg1)->keys_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1cursor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->cursor = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1cursor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (long) ((arg1)->cursor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (long) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1field_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->field;
    if (arg2) {
      arg1->field = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->field, (const char *)arg2);
    } else {
      arg1->field = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1field_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->field);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->fields = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char **) ((arg1)->fields);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1fields_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->fields_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1fields_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result =  ((arg1)->fields_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1subcommand_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->subcommand;
    if (arg2) {
      arg1->subcommand = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->subcommand, (const char *)arg2);
    } else {
      arg1->subcommand = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1subcommand_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->subcommand);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1pattern_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->pattern;
    if (arg2) {
      arg1->pattern = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->pattern, (const char *)arg2);
    } else {
      arg1->pattern = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1pattern_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->pattern);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1idx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->idx = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1idx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (long) ((arg1)->idx);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->min;
    if (arg2) {
      arg1->min = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->min, (const char *)arg2);
    } else {
      arg1->min = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->min);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->max;
    if (arg2) {
      arg1->max = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->max, (const char *)arg2);
    } else {
      arg1->max = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->max);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->limit;
    if (arg2) {
      arg1->limit = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->limit, (const char *)arg2);
    } else {
      arg1->limit = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->limit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (unsigned long) ((arg1)->count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1match_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->match;
    if (arg2) {
      arg1->match = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->match, (const char *)arg2);
    } else {
      arg1->match = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleRequest_1match_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  result = (char *) ((arg1)->match);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1KuzzleRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzle_request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzle_request *)new kuzzle_request();
  *(kuzzle_request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1KuzzleRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzle_request **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->instance = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (void *) ((arg1)->instance);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1filter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_queue_filter arg2 = (kuzzle_queue_filter) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(kuzzle_queue_filter *)&jarg2; 
  if (arg1) (arg1)->filter = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1filter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_queue_filter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (kuzzle_queue_filter) ((arg1)->filter);
  *(kuzzle_queue_filter *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1loader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_offline_queue_loader arg2 = (kuzzle_offline_queue_loader) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(kuzzle_offline_queue_loader *)&jarg2; 
  if (arg1) (arg1)->loader = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1loader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_offline_queue_loader result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (kuzzle_offline_queue_loader) ((arg1)->loader);
  *(kuzzle_offline_queue_loader *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1kuzzle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzle *)new kuzzle();
  *(kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1kuzzle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->instance = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  result = (void *) ((arg1)->instance);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1kuzzle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  if (arg1) (arg1)->kuzzle = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1kuzzle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  result = (kuzzle *) ((arg1)->kuzzle);
  *(kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1kuzzle_1index(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzle_index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzle_index *)new kuzzle_index();
  *(kuzzle_index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1kuzzle_1index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzle_index **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_server_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  server *arg1 = (server *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->instance = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_server_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(server **)&jarg1; 
  result = (void *) ((arg1)->instance);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_server_1kuzzle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  server *arg1 = (server *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  if (arg1) (arg1)->kuzzle = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_server_1kuzzle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(server **)&jarg1; 
  result = (kuzzle *) ((arg1)->kuzzle);
  *(kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1server(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (server *)new server();
  *(server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1server(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  server *arg1 = (server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(server **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1scope_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  room_options *arg1 = (room_options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scope;
    if (arg2) {
      arg1->scope = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scope, (const char *)arg2);
    } else {
      arg1->scope = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1scope_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  room_options *arg1 = (room_options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  result = (char *) ((arg1)->scope);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  room_options *arg1 = (room_options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->state;
    if (arg2) {
      arg1->state = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->state, (const char *)arg2);
    } else {
      arg1->state = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  room_options *arg1 = (room_options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  result = (char *) ((arg1)->state);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  room_options *arg1 = (room_options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->user;
    if (arg2) {
      arg1->user = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->user, (const char *)arg2);
    } else {
      arg1->user = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  room_options *arg1 = (room_options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  result = (char *) ((arg1)->user);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1subscribe_1to_1self_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  room_options *arg1 = (room_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->subscribe_to_self = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1subscribe_1to_1self_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  room_options *arg1 = (room_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  result = (bool) ((arg1)->subscribe_to_self);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1volatiles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  room_options *arg1 = (room_options *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(room_options **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->volatiles = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_RoomOptions_1volatiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  room_options *arg1 = (room_options *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  result = (json_object *) ((arg1)->volatiles);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1RoomOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  room_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (room_options *)new room_options();
  *(room_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1RoomOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  room_options *arg1 = (room_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(room_options **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  room *arg1 = (room *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->instance = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  room *arg1 = (room *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  result = (void *) ((arg1)->instance);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1filters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  room *arg1 = (room *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(room **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->filters = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1filters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  room *arg1 = (room *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  result = (json_object *) ((arg1)->filters);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1options_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  room *arg1 = (room *) 0 ;
  room_options *arg2 = (room_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(room **)&jarg1; 
  arg2 = *(room_options **)&jarg2; 
  if (arg1) (arg1)->options = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  room *arg1 = (room *) 0 ;
  room_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  result = (room_options *) ((arg1)->options);
  *(room_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1room(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (room *)new room();
  *(room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1room(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  room *arg1 = (room *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(room **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  room_result *arg1 = (room_result *) 0 ;
  room *arg2 = (room *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(room_result **)&jarg1; 
  arg2 = *(room **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  room_result *arg1 = (room_result *) 0 ;
  room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_result **)&jarg1; 
  result = (room *) ((arg1)->result);
  *(room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1result_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  room_result *arg1 = (room_result *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_result **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1result_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  room_result *arg1 = (room_result *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_result **)&jarg1; 
  result = (int) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1result_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  room_result *arg1 = (room_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->error;
    if (arg2) {
      arg1->error = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->error, (const char *)arg2);
    } else {
      arg1->error = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1result_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  room_result *arg1 = (room_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_result **)&jarg1; 
  result = (char *) ((arg1)->error);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1result_1stack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  room_result *arg1 = (room_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->stack;
    if (arg2) {
      arg1->stack = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->stack, (const char *)arg2);
    } else {
      arg1->stack = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1result_1stack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  room_result *arg1 = (room_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_result **)&jarg1; 
  result = (char *) ((arg1)->stack);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1room_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  room_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (room_result *)new room_result();
  *(room_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1room_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  room_result *arg1 = (room_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(room_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1queuable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->queuable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1queuable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (bool) ((arg1)->queuable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1withdist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->withdist = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1withdist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (bool) ((arg1)->withdist);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1withcoord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->withcoord = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1withcoord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (bool) ((arg1)->withcoord);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1from_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->from = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1from_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (long) ((arg1)->from);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (long) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1scroll_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scroll;
    if (arg2) {
      arg1->scroll = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scroll, (const char *)arg2);
    } else {
      arg1->scroll = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1scroll_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (char *) ((arg1)->scroll);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1scroll_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scroll_id;
    if (arg2) {
      arg1->scroll_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scroll_id, (const char *)arg2);
    } else {
      arg1->scroll_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1scroll_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (char *) ((arg1)->scroll_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1refresh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->refresh;
    if (arg2) {
      arg1->refresh = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->refresh, (const char *)arg2);
    } else {
      arg1->refresh = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1refresh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (char *) ((arg1)->refresh);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1if_1exist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->if_exist;
    if (arg2) {
      arg1->if_exist = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->if_exist, (const char *)arg2);
    } else {
      arg1->if_exist = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1if_1exist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (char *) ((arg1)->if_exist);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1retry_1on_1conflict_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  query_options *arg1 = (query_options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->retry_on_conflict = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1retry_1on_1conflict_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (int) ((arg1)->retry_on_conflict);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1volatiles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  query_options *arg1 = (query_options *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(query_options **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->volatiles = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_QueryOptions_1volatiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  query_options *arg1 = (query_options *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  result = (json_object *) ((arg1)->volatiles);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1QueryOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  query_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (query_options *)new query_options();
  *(query_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1QueryOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  query_options *arg1 = (query_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(query_options **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1queueTTL_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  options *arg1 = (options *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->queue_ttl = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1queueTTL_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  options *arg1 = (options *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (unsigned int) ((arg1)->queue_ttl);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1queue_1max_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  options *arg1 = (options *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->queue_max_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1queue_1max_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  options *arg1 = (options *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (unsigned long) ((arg1)->queue_max_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1offline_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  options *arg1 = (options *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->offline_mode = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1offline_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  options *arg1 = (options *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (unsigned char) ((arg1)->offline_mode);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1auto_1queue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  options *arg1 = (options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->auto_queue = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1auto_1queue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  options *arg1 = (options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (bool) ((arg1)->auto_queue);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1auto_1reconnect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  options *arg1 = (options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->auto_reconnect = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1auto_1reconnect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  options *arg1 = (options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (bool) ((arg1)->auto_reconnect);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1auto_1replay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  options *arg1 = (options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->auto_replay = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1auto_1replay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  options *arg1 = (options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (bool) ((arg1)->auto_replay);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1auto_1resubscribe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  options *arg1 = (options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->auto_resubscribe = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1auto_1resubscribe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  options *arg1 = (options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (bool) ((arg1)->auto_resubscribe);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1reconnection_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  options *arg1 = (options *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->reconnection_delay = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1reconnection_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  options *arg1 = (options *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (unsigned long) ((arg1)->reconnection_delay);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1replay_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  options *arg1 = (options *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->replay_interval = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1replay_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  options *arg1 = (options *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (unsigned long) ((arg1)->replay_interval);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1connect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  options *arg1 = (options *) 0 ;
  enum Mode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = (enum Mode)jarg2; 
  if (arg1) (arg1)->connect = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1connect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  options *arg1 = (options *) 0 ;
  enum Mode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (enum Mode) ((arg1)->connect);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1refresh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  options *arg1 = (options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->refresh;
    if (arg2) {
      arg1->refresh = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->refresh, (const char *)arg2);
    } else {
      arg1->refresh = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1refresh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  options *arg1 = (options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (char *) ((arg1)->refresh);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1default_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  options *arg1 = (options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->default_index;
    if (arg2) {
      arg1->default_index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->default_index, (const char *)arg2);
    } else {
      arg1->default_index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Options_1default_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  options *arg1 = (options *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  result = (char *) ((arg1)->default_index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Options(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (options *)new_options();
  *(options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1Options(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  options *arg1 = (options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(options **)&jarg1; 
  delete_options(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1author_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  meta *arg1 = (meta *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->author;
    if (arg2) {
      arg1->author = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->author, (const char *)arg2);
    } else {
      arg1->author = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1author_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  meta *arg1 = (meta *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  result = (char *) ((arg1)->author);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1created_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  meta *arg1 = (meta *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->created_at = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1created_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  meta *arg1 = (meta *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  result = (unsigned long long) ((arg1)->created_at);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1updated_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  meta *arg1 = (meta *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->updated_at = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1updated_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  meta *arg1 = (meta *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  result = (unsigned long long) ((arg1)->updated_at);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1updater_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  meta *arg1 = (meta *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->updater;
    if (arg2) {
      arg1->updater = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->updater, (const char *)arg2);
    } else {
      arg1->updater = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1updater_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  meta *arg1 = (meta *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  result = (char *) ((arg1)->updater);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1active_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  meta *arg1 = (meta *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->active = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1active_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  meta *arg1 = (meta *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  result = (bool) ((arg1)->active);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1deleted_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  meta *arg1 = (meta *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->deleted_at = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_kuzzle_sdk_kcoreJNI_meta_1deleted_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  meta *arg1 = (meta *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  result = (unsigned long long) ((arg1)->deleted_at);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1meta(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  meta *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (meta *)new meta();
  *(meta **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1meta(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  meta *arg1 = (meta *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(meta **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restriction_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  policy_restriction *arg1 = (policy_restriction *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy_restriction **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->index;
    if (arg2) {
      arg1->index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->index, (const char *)arg2);
    } else {
      arg1->index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restriction_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  policy_restriction *arg1 = (policy_restriction *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy_restriction **)&jarg1; 
  result = (char *) ((arg1)->index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restriction_1collections_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  policy_restriction *arg1 = (policy_restriction *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy_restriction **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->collections = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restriction_1collections_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  policy_restriction *arg1 = (policy_restriction *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy_restriction **)&jarg1; 
  result = (char **) ((arg1)->collections);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restriction_1collections_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  policy_restriction *arg1 = (policy_restriction *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy_restriction **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->collections_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restriction_1collections_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  policy_restriction *arg1 = (policy_restriction *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy_restriction **)&jarg1; 
  result =  ((arg1)->collections_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1policy_1restriction(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  policy_restriction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (policy_restriction *)new policy_restriction();
  *(policy_restriction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1policy_1restriction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  policy_restriction *arg1 = (policy_restriction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(policy_restriction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1role_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  policy *arg1 = (policy *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->role_id;
    if (arg2) {
      arg1->role_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->role_id, (const char *)arg2);
    } else {
      arg1->role_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1role_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  policy *arg1 = (policy *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy **)&jarg1; 
  result = (char *) ((arg1)->role_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restricted_1to_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  policy *arg1 = (policy *) 0 ;
  policy_restriction *arg2 = (policy_restriction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(policy **)&jarg1; 
  arg2 = *(policy_restriction **)&jarg2; 
  if (arg1) (arg1)->restricted_to = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restricted_1to_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  policy *arg1 = (policy *) 0 ;
  policy_restriction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy **)&jarg1; 
  result = (policy_restriction *) ((arg1)->restricted_to);
  *(policy_restriction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restricted_1to_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  policy *arg1 = (policy *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->restricted_to_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_policy_1restricted_1to_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  policy *arg1 = (policy *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy **)&jarg1; 
  result =  ((arg1)->restricted_to_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1policy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  policy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (policy *)new policy();
  *(policy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1policy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  policy *arg1 = (policy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(policy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  profile *arg1 = (profile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->id;
    if (arg2) {
      arg1->id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->id, (const char *)arg2);
    } else {
      arg1->id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  profile *arg1 = (profile *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile **)&jarg1; 
  result = (char *) ((arg1)->id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1policies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  profile *arg1 = (profile *) 0 ;
  policy *arg2 = (policy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(profile **)&jarg1; 
  arg2 = *(policy **)&jarg2; 
  if (arg1) (arg1)->policies = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1policies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profile *arg1 = (profile *) 0 ;
  policy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile **)&jarg1; 
  result = (policy *) ((arg1)->policies);
  *(policy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1policies_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  profile *arg1 = (profile *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->policies_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1policies_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profile *arg1 = (profile *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile **)&jarg1; 
  result =  ((arg1)->policies_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1kuzzle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  profile *arg1 = (profile *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(profile **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  if (arg1) (arg1)->kuzzle = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1kuzzle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profile *arg1 = (profile *) 0 ;
  kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile **)&jarg1; 
  result = (kuzzle *) ((arg1)->kuzzle);
  *(kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1profile(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  profile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (profile *)new profile();
  *(profile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1profile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  profile *arg1 = (profile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(profile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  role *arg1 = (role *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->id;
    if (arg2) {
      arg1->id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->id, (const char *)arg2);
    } else {
      arg1->id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  role *arg1 = (role *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role **)&jarg1; 
  result = (char *) ((arg1)->id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1controllers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  role *arg1 = (role *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(role **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->controllers = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1controllers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  role *arg1 = (role *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role **)&jarg1; 
  result = (json_object *) ((arg1)->controllers);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1kuzzle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  role *arg1 = (role *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(role **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  if (arg1) (arg1)->kuzzle = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1kuzzle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  role *arg1 = (role *) 0 ;
  kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role **)&jarg1; 
  result = (kuzzle *) ((arg1)->kuzzle);
  *(kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1role(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (role *)new role();
  *(role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1role(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  role *arg1 = (role *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(role **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  user *arg1 = (user *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->id;
    if (arg2) {
      arg1->id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->id, (const char *)arg2);
    } else {
      arg1->id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  user *arg1 = (user *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  result = (char *) ((arg1)->id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  user *arg1 = (user *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->content = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  result = (json_object *) ((arg1)->content);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1profile_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  user *arg1 = (user *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->profile_ids = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1profile_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  result = (char **) ((arg1)->profile_ids);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1profile_1ids_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  user *arg1 = (user *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->profile_ids_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1profile_1ids_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  result =  ((arg1)->profile_ids_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1kuzzle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  user *arg1 = (user *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  if (arg1) (arg1)->kuzzle = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_User_1kuzzle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  result = (kuzzle *) ((arg1)->kuzzle);
  *(kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1User(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  user *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (user *)new user();
  *(user **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1User(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  user *arg1 = (user *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(user **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_UserData_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  user_data *arg1 = (user_data *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user_data **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->content = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_UserData_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_data *arg1 = (user_data *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_data **)&jarg1; 
  result = (json_object *) ((arg1)->content);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_UserData_1profile_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  user_data *arg1 = (user_data *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_data **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->profile_ids = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_UserData_1profile_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_data *arg1 = (user_data *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_data **)&jarg1; 
  result = (char **) ((arg1)->profile_ids);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_UserData_1profile_1ids_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  user_data *arg1 = (user_data *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_data **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->profile_ids_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_UserData_1profile_1ids_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_data *arg1 = (user_data *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_data **)&jarg1; 
  result =  ((arg1)->profile_ids_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1UserData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  user_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (user_data *)new user_data();
  *(user_data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1UserData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  user_data *arg1 = (user_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(user_data **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_shards_1failed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  shards *arg1 = (shards *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shards **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->failed = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_shards_1failed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  shards *arg1 = (shards *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shards **)&jarg1; 
  result = (int) ((arg1)->failed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_shards_1successful_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  shards *arg1 = (shards *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shards **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->successful = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_shards_1successful_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  shards *arg1 = (shards *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shards **)&jarg1; 
  result = (int) ((arg1)->successful);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_shards_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  shards *arg1 = (shards *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shards **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->total = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_shards_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  shards *arg1 = (shards *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shards **)&jarg1; 
  result = (int) ((arg1)->total);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1shards(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shards *)new shards();
  *(shards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1shards(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shards *arg1 = (shards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shards **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_collection_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  collection *arg1 = (collection *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->instance = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_collection_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  result = (void *) ((arg1)->instance);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_collection_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->index;
    if (arg2) {
      arg1->index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->index, (const char *)arg2);
    } else {
      arg1->index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_collection_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  result = (char *) ((arg1)->index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_collection_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->collection;
    if (arg2) {
      arg1->collection = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->collection, (const char *)arg2);
    } else {
      arg1->collection = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_collection_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  result = (char *) ((arg1)->collection);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_collection_1kuzzle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  collection *arg1 = (collection *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  if (arg1) (arg1)->kuzzle = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_collection_1kuzzle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  result = (kuzzle *) ((arg1)->kuzzle);
  *(kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1collection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  collection *arg1 = (collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(collection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  document *arg1 = (document *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->instance = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (void *) ((arg1)->instance);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  document *arg1 = (document *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->id;
    if (arg2) {
      arg1->id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->id, (const char *)arg2);
    } else {
      arg1->id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  document *arg1 = (document *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (char *) ((arg1)->id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  document *arg1 = (document *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->index;
    if (arg2) {
      arg1->index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->index, (const char *)arg2);
    } else {
      arg1->index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  document *arg1 = (document *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (char *) ((arg1)->index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1meta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  document *arg1 = (document *) 0 ;
  meta *arg2 = (meta *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(meta **)&jarg2; 
  if (arg1) (arg1)->meta = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1meta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  meta *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (meta *) ((arg1)->meta);
  *(meta **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1shards_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  document *arg1 = (document *) 0 ;
  shards *arg2 = (shards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(shards **)&jarg2; 
  if (arg1) (arg1)->shards = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1shards_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  shards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (shards *) ((arg1)->shards);
  *(shards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  document *arg1 = (document *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->content = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (json_object *) ((arg1)->content);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  document *arg1 = (document *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  document *arg1 = (document *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (int) ((arg1)->version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  document *arg1 = (document *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->result;
    if (arg2) {
      arg1->result = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->result, (const char *)arg2);
    } else {
      arg1->result = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  document *arg1 = (document *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (char *) ((arg1)->result);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1created_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  document *arg1 = (document *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->created = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1created_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  document *arg1 = (document *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (bool) ((arg1)->created);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  document *arg1 = (document *) 0 ;
  collection *arg2 = (collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(collection **)&jarg2; 
  if (arg1) (arg1)->_collection = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (collection *) ((arg1)->_collection);
  *(collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  document *arg1 = (document *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->collection;
    if (arg2) {
      arg1->collection = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->collection, (const char *)arg2);
    } else {
      arg1->collection = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  document *arg1 = (document *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (char *) ((arg1)->collection);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1document(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (document *)new document();
  *(document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1document(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  document *arg1 = (document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(document **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  document_result *arg1 = (document_result *) 0 ;
  document *arg2 = (document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document_result **)&jarg1; 
  arg2 = *(document **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document_result *arg1 = (document_result *) 0 ;
  document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_result **)&jarg1; 
  result = (document *) ((arg1)->result);
  *(document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1document_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  document_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (document_result *)new document_result();
  *(document_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1document_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  document_result *arg1 = (document_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(document_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  document_array_result *arg1 = (document_array_result *) 0 ;
  document *arg2 = (document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document_array_result **)&jarg1; 
  arg2 = *(document **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document_array_result *arg1 = (document_array_result *) 0 ;
  document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  result = (document *) ((arg1)->result);
  *(document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1result_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  document_array_result *arg1 = (document_array_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->result_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1result_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document_array_result *arg1 = (document_array_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  result =  ((arg1)->result_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  document_array_result *arg1 = (document_array_result *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  document_array_result *arg1 = (document_array_result *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  result = (int) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  document_array_result *arg1 = (document_array_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->error;
    if (arg2) {
      arg1->error = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->error, (const char *)arg2);
    } else {
      arg1->error = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  document_array_result *arg1 = (document_array_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  result = (char *) ((arg1)->error);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1stack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  document_array_result *arg1 = (document_array_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->stack;
    if (arg2) {
      arg1->stack = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->stack, (const char *)arg2);
    } else {
      arg1->stack = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_document_1array_1result_1stack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  document_array_result *arg1 = (document_array_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  result = (char *) ((arg1)->stack);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1document_1array_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  document_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (document_array_result *)new document_array_result();
  *(document_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1document_1array_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  document_array_result *arg1 = (document_array_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(document_array_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1content_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_content *arg1 = (notification_content *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_content **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->id;
    if (arg2) {
      arg1->id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->id, (const char *)arg2);
    } else {
      arg1->id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1content_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_content *arg1 = (notification_content *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_content **)&jarg1; 
  result = (char *) ((arg1)->id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1content_1meta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  notification_content *arg1 = (notification_content *) 0 ;
  meta *arg2 = (meta *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(notification_content **)&jarg1; 
  arg2 = *(meta **)&jarg2; 
  if (arg1) (arg1)->meta = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1content_1meta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  notification_content *arg1 = (notification_content *) 0 ;
  meta *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_content **)&jarg1; 
  result = (meta *) ((arg1)->meta);
  *(meta **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1content_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  notification_content *arg1 = (notification_content *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(notification_content **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->content = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1content_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  notification_content *arg1 = (notification_content *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_content **)&jarg1; 
  result = (json_object *) ((arg1)->content);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1content_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  notification_content *arg1 = (notification_content *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_content **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1content_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  notification_content *arg1 = (notification_content *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_content **)&jarg1; 
  result = (int) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1notification_1content(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  notification_content *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (notification_content *)new notification_content();
  *(notification_content **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1notification_1content(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  notification_content *arg1 = (notification_content *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(notification_content **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1request_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->request_id;
    if (arg2) {
      arg1->request_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->request_id, (const char *)arg2);
    } else {
      arg1->request_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1request_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->request_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  notification_result *arg1 = (notification_result *) 0 ;
  notification_content *arg2 = (notification_content *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = *(notification_content **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  notification_content *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (notification_content *) ((arg1)->result);
  *(notification_content **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1volatiles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  notification_result *arg1 = (notification_result *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->volatiles = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1volatiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (json_object *) ((arg1)->volatiles);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->index;
    if (arg2) {
      arg1->index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->index, (const char *)arg2);
    } else {
      arg1->index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->collection;
    if (arg2) {
      arg1->collection = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->collection, (const char *)arg2);
    } else {
      arg1->collection = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->collection);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1controller_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->controller;
    if (arg2) {
      arg1->controller = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->controller, (const char *)arg2);
    } else {
      arg1->controller = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1controller_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->controller);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1action_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->action;
    if (arg2) {
      arg1->action = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->action, (const char *)arg2);
    } else {
      arg1->action = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1action_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->action);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1protocol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->protocol;
    if (arg2) {
      arg1->protocol = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->protocol, (const char *)arg2);
    } else {
      arg1->protocol = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1protocol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->protocol);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1scope_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scope;
    if (arg2) {
      arg1->scope = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scope, (const char *)arg2);
    } else {
      arg1->scope = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1scope_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->scope);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->state;
    if (arg2) {
      arg1->state = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->state, (const char *)arg2);
    } else {
      arg1->state = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->state);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->user;
    if (arg2) {
      arg1->user = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->user, (const char *)arg2);
    } else {
      arg1->user = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->user);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1n_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->n_type;
    if (arg2) {
      arg1->n_type = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->n_type, (const char *)arg2);
    } else {
      arg1->n_type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1n_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->n_type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1room_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->room_id;
    if (arg2) {
      arg1->room_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->room_id, (const char *)arg2);
    } else {
      arg1->room_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1room_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (char *) ((arg1)->room_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_kuzzle_sdk_kcoreJNI_notification_1result_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  notification_result *arg1 = (notification_result *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  result = (unsigned long long) ((arg1)->timestamp);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1notification_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  notification_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (notification_result *)new notification_result();
  *(notification_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1notification_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  notification_result *arg1 = (notification_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(notification_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1result_1profile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  profile_result *arg1 = (profile_result *) 0 ;
  profile *arg2 = (profile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(profile_result **)&jarg1; 
  arg2 = *(profile **)&jarg2; 
  if (arg1) (arg1)->profile = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1result_1profile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profile_result *arg1 = (profile_result *) 0 ;
  profile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_result **)&jarg1; 
  result = (profile *) ((arg1)->profile);
  *(profile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1profile_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  profile_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (profile_result *)new profile_result();
  *(profile_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1profile_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  profile_result *arg1 = (profile_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(profile_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profiles_1result_1profiles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  profiles_result *arg1 = (profiles_result *) 0 ;
  profile *arg2 = (profile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(profiles_result **)&jarg1; 
  arg2 = *(profile **)&jarg2; 
  if (arg1) (arg1)->profiles = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profiles_1result_1profiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profiles_result *arg1 = (profiles_result *) 0 ;
  profile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profiles_result **)&jarg1; 
  result = (profile *) ((arg1)->profiles);
  *(profile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profiles_1result_1profiles_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  profiles_result *arg1 = (profiles_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profiles_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->profiles_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profiles_1result_1profiles_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profiles_result *arg1 = (profiles_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profiles_result **)&jarg1; 
  result =  ((arg1)->profiles_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1profiles_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  profiles_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (profiles_result *)new profiles_result();
  *(profiles_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1profiles_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  profiles_result *arg1 = (profiles_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(profiles_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1result_1role_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  role_result *arg1 = (role_result *) 0 ;
  role *arg2 = (role *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(role_result **)&jarg1; 
  arg2 = *(role **)&jarg2; 
  if (arg1) (arg1)->role = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1result_1role_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  role_result *arg1 = (role_result *) 0 ;
  role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role_result **)&jarg1; 
  result = (role *) ((arg1)->role);
  *(role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1role_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  role_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (role_result *)new role_result();
  *(role_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1role_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  role_result *arg1 = (role_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(role_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1controller_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  user_right *arg1 = (user_right *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->controller;
    if (arg2) {
      arg1->controller = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->controller, (const char *)arg2);
    } else {
      arg1->controller = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1controller_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  user_right *arg1 = (user_right *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  result = (char *) ((arg1)->controller);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1action_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  user_right *arg1 = (user_right *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->action;
    if (arg2) {
      arg1->action = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->action, (const char *)arg2);
    } else {
      arg1->action = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1action_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  user_right *arg1 = (user_right *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  result = (char *) ((arg1)->action);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  user_right *arg1 = (user_right *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->index;
    if (arg2) {
      arg1->index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->index, (const char *)arg2);
    } else {
      arg1->index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  user_right *arg1 = (user_right *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  result = (char *) ((arg1)->index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  user_right *arg1 = (user_right *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->collection;
    if (arg2) {
      arg1->collection = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->collection, (const char *)arg2);
    } else {
      arg1->collection = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  user_right *arg1 = (user_right *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  result = (char *) ((arg1)->collection);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  user_right *arg1 = (user_right *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->value;
    if (arg2) {
      arg1->value = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->value, (const char *)arg2);
    } else {
      arg1->value = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1right_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  user_right *arg1 = (user_right *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  result = (char *) ((arg1)->value);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1user_1right(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  user_right *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (user_right *)new user_right();
  *(user_right **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1user_1right(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  user_right *arg1 = (user_right *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(user_right **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1rights_1result_1user_1rights_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  user_rights_result *arg1 = (user_rights_result *) 0 ;
  user_right *arg2 = (user_right *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user_rights_result **)&jarg1; 
  arg2 = *(user_right **)&jarg2; 
  if (arg1) (arg1)->user_rights = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1rights_1result_1user_1rights_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_rights_result *arg1 = (user_rights_result *) 0 ;
  user_right *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_rights_result **)&jarg1; 
  result = (user_right *) ((arg1)->user_rights);
  *(user_right **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1rights_1result_1user_1rights_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  user_rights_result *arg1 = (user_rights_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_rights_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->user_rights_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1rights_1result_1user_1rights_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_rights_result *arg1 = (user_rights_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_rights_result **)&jarg1; 
  result =  ((arg1)->user_rights_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1user_1rights_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  user_rights_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (user_rights_result *)new user_rights_result();
  *(user_rights_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1user_1rights_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  user_rights_result *arg1 = (user_rights_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(user_rights_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1result_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  user_result *arg1 = (user_result *) 0 ;
  user *arg2 = (user *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user_result **)&jarg1; 
  arg2 = *(user **)&jarg2; 
  if (arg1) (arg1)->user = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1result_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_result *arg1 = (user_result *) 0 ;
  user *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_result **)&jarg1; 
  result = (user *) ((arg1)->user);
  *(user **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1user_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  user_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (user_result *)new user_result();
  *(user_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1user_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  user_result *arg1 = (user_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(user_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_ALLOWED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  is_action_allowed result;
  
  (void)jenv;
  (void)jcls;
  result = (is_action_allowed)ALLOWED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_CONDITIONNAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  is_action_allowed result;
  
  (void)jenv;
  (void)jcls;
  result = (is_action_allowed)CONDITIONNAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_DENIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  is_action_allowed result;
  
  (void)jenv;
  (void)jcls;
  result = (is_action_allowed)DENIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1completed_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  statistics *arg1 = (statistics *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(statistics **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->completed_requests = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1completed_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  statistics *arg1 = (statistics *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics **)&jarg1; 
  result = (json_object *) ((arg1)->completed_requests);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1connections_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  statistics *arg1 = (statistics *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(statistics **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->connections = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1connections_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  statistics *arg1 = (statistics *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics **)&jarg1; 
  result = (json_object *) ((arg1)->connections);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1failed_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  statistics *arg1 = (statistics *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(statistics **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->failed_requests = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1failed_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  statistics *arg1 = (statistics *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics **)&jarg1; 
  result = (json_object *) ((arg1)->failed_requests);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1ongoing_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  statistics *arg1 = (statistics *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(statistics **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->ongoing_requests = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1ongoing_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  statistics *arg1 = (statistics *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics **)&jarg1; 
  result = (json_object *) ((arg1)->ongoing_requests);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  statistics *arg1 = (statistics *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_kuzzle_sdk_kcoreJNI_Statistics_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  statistics *arg1 = (statistics *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics **)&jarg1; 
  result = (unsigned long long) ((arg1)->timestamp);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Statistics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  statistics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (statistics *)new statistics();
  *(statistics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1Statistics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  statistics *arg1 = (statistics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(statistics **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_StatisticsResult_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  statistics_result *arg1 = (statistics_result *) 0 ;
  statistics *arg2 = (statistics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(statistics_result **)&jarg1; 
  arg2 = *(statistics **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_StatisticsResult_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  statistics_result *arg1 = (statistics_result *) 0 ;
  statistics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics_result **)&jarg1; 
  result = (statistics *) ((arg1)->result);
  *(statistics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1StatisticsResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  statistics_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (statistics_result *)new statistics_result();
  *(statistics_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1StatisticsResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  statistics_result *arg1 = (statistics_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(statistics_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_AllStatisticsResult_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  all_statistics_result *arg1 = (all_statistics_result *) 0 ;
  statistics *arg2 = (statistics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(all_statistics_result **)&jarg1; 
  arg2 = *(statistics **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_AllStatisticsResult_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  all_statistics_result *arg1 = (all_statistics_result *) 0 ;
  statistics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(all_statistics_result **)&jarg1; 
  result = (statistics *) ((arg1)->result);
  *(statistics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_AllStatisticsResult_1result_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  all_statistics_result *arg1 = (all_statistics_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(all_statistics_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->result_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_AllStatisticsResult_1result_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  all_statistics_result *arg1 = (all_statistics_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(all_statistics_result **)&jarg1; 
  result =  ((arg1)->result_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1AllStatisticsResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  all_statistics_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (all_statistics_result *)new all_statistics_result();
  *(all_statistics_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1AllStatisticsResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  all_statistics_result *arg1 = (all_statistics_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(all_statistics_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_geopos_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  geopos_result *arg1 = (geopos_result *) 0 ;
  double (*arg2)[2] = (double (*)[2]) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geopos_result **)&jarg1; 
  arg2 = *(double (**)[2])&jarg2; 
  if (arg1) (arg1)->result = (double (*)[2])arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_geopos_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geopos_result *arg1 = (geopos_result *) 0 ;
  double (*result)[2] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geopos_result **)&jarg1; 
  result = (double (*)[2]) ((arg1)->result);
  *(double (**)[2])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_geopos_1result_1result_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  geopos_result *arg1 = (geopos_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geopos_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->result_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_geopos_1result_1result_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geopos_result *arg1 = (geopos_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geopos_result **)&jarg1; 
  result =  ((arg1)->result_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1geopos_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  geopos_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (geopos_result *)new geopos_result();
  *(geopos_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1geopos_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geopos_result *arg1 = (geopos_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geopos_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_TokenValidity_1valid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  token_validity *arg1 = (token_validity *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(token_validity **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->valid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_TokenValidity_1valid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  token_validity *arg1 = (token_validity *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(token_validity **)&jarg1; 
  result = (bool) ((arg1)->valid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_TokenValidity_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  token_validity *arg1 = (token_validity *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(token_validity **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->state;
    if (arg2) {
      arg1->state = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->state, (const char *)arg2);
    } else {
      arg1->state = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_TokenValidity_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  token_validity *arg1 = (token_validity *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(token_validity **)&jarg1; 
  result = (char *) ((arg1)->state);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_TokenValidity_1expires_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  token_validity *arg1 = (token_validity *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(token_validity **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->expires_at = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_kuzzle_sdk_kcoreJNI_TokenValidity_1expires_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  token_validity *arg1 = (token_validity *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(token_validity **)&jarg1; 
  result = (unsigned long long) ((arg1)->expires_at);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1TokenValidity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  token_validity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (token_validity *)new token_validity();
  *(token_validity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1TokenValidity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  token_validity *arg1 = (token_validity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(token_validity **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1request_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->request_id;
    if (arg2) {
      arg1->request_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->request_id, (const char *)arg2);
    } else {
      arg1->request_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1request_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (char *) ((arg1)->request_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (json_object *) ((arg1)->result);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1volatiles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->volatiles = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1volatiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (json_object *) ((arg1)->volatiles);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->index;
    if (arg2) {
      arg1->index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->index, (const char *)arg2);
    } else {
      arg1->index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (char *) ((arg1)->index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->collection;
    if (arg2) {
      arg1->collection = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->collection, (const char *)arg2);
    } else {
      arg1->collection = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (char *) ((arg1)->collection);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1controller_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->controller;
    if (arg2) {
      arg1->controller = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->controller, (const char *)arg2);
    } else {
      arg1->controller = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1controller_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (char *) ((arg1)->controller);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1action_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->action;
    if (arg2) {
      arg1->action = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->action, (const char *)arg2);
    } else {
      arg1->action = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1action_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (char *) ((arg1)->action);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1room_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->room_id;
    if (arg2) {
      arg1->room_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->room_id, (const char *)arg2);
    } else {
      arg1->room_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1room_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (char *) ((arg1)->room_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1channel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->channel;
    if (arg2) {
      arg1->channel = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->channel, (const char *)arg2);
    } else {
      arg1->channel = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleResponse_1channel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  result = (char *) ((arg1)->channel);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1KuzzleResponse(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzle_response *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzle_response *)new kuzzle_response();
  *(kuzzle_response **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1KuzzleResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzle_response **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1void_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (void_result *)new void_result();
  *(void_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1void_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void_result *arg1 = (void_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonResult_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  json_result *arg1 = (json_result *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(json_result **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonResult_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  json_result *arg1 = (json_result *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_result **)&jarg1; 
  result = (json_object *) ((arg1)->result);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1JsonResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (json_result *)new json_result();
  *(json_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1JsonResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  json_result *arg1 = (json_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(json_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_json_1array_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  json_array_result *arg1 = (json_array_result *) 0 ;
  json_object **arg2 = (json_object **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_array_result **)&jarg1; 
  arg2 = *(json_object ***)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_json_1array_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  json_array_result *arg1 = (json_array_result *) 0 ;
  json_object **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_array_result **)&jarg1; 
  result = (json_object **) ((arg1)->result);
  *(json_object ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_json_1array_1result_1result_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  json_array_result *arg1 = (json_array_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_array_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->result_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_json_1array_1result_1result_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  json_array_result *arg1 = (json_array_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_array_result **)&jarg1; 
  result =  ((arg1)->result_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1json_1array_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  json_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (json_array_result *)new json_array_result();
  *(json_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1json_1array_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  json_array_result *arg1 = (json_array_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(json_array_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_BoolResult_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  bool_result *arg1 = (bool_result *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bool_result **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_BoolResult_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bool_result *arg1 = (bool_result *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bool_result **)&jarg1; 
  result = (bool) ((arg1)->result);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1BoolResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bool_result *)new bool_result();
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1BoolResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bool_result *arg1 = (bool_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_int_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  int_result *arg1 = (int_result *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int_result **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_int_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int_result *arg1 = (int_result *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int_result **)&jarg1; 
  result = (long long) ((arg1)->result);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1int_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int_result *)new int_result();
  *(int_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1int_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int_result *arg1 = (int_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_DateResult_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  date_result *arg1 = (date_result *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(date_result **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_DateResult_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  date_result *arg1 = (date_result *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(date_result **)&jarg1; 
  result = (long long) ((arg1)->result);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1DateResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  date_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (date_result *)new date_result();
  *(date_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1DateResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  date_result *arg1 = (date_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(date_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_double_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  double_result *arg1 = (double_result *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(double_result **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_kuzzle_sdk_kcoreJNI_double_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  double_result *arg1 = (double_result *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(double_result **)&jarg1; 
  result = (double) ((arg1)->result);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1double_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  double_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (double_result *)new double_result();
  *(double_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1double_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double_result *arg1 = (double_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_int_1array_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  int_array_result *arg1 = (int_array_result *) 0 ;
  long long *arg2 = (long long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int_array_result **)&jarg1; 
  arg2 = *(long long **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_int_1array_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int_array_result *arg1 = (int_array_result *) 0 ;
  long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int_array_result **)&jarg1; 
  result = (long long *) ((arg1)->result);
  *(long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_int_1array_1result_1result_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  int_array_result *arg1 = (int_array_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int_array_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->result_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_int_1array_1result_1result_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int_array_result *arg1 = (int_array_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int_array_result **)&jarg1; 
  result =  ((arg1)->result_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1int_1array_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int_array_result *)new int_array_result();
  *(int_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1int_1array_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int_array_result *arg1 = (int_array_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int_array_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_string_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  string_result *arg1 = (string_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(string_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->result;
    if (arg2) {
      arg1->result = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->result, (const char *)arg2);
    } else {
      arg1->result = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_string_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  string_result *arg1 = (string_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(string_result **)&jarg1; 
  result = (char *) ((arg1)->result);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1string_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (string_result *)new string_result();
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1string_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  string_result *arg1 = (string_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(string_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringArrayResult_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  string_array_result *arg1 = (string_array_result *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(string_array_result **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringArrayResult_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  string_array_result *arg1 = (string_array_result *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(string_array_result **)&jarg1; 
  result = (char **) ((arg1)->result);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringArrayResult_1result_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  string_array_result *arg1 = (string_array_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(string_array_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->result_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringArrayResult_1result_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  string_array_result *arg1 = (string_array_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(string_array_result **)&jarg1; 
  result =  ((arg1)->result_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1StringArrayResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (string_array_result *)new string_array_result();
  *(string_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1StringArrayResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  string_array_result *arg1 = (string_array_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(string_array_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchFilters_1query_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_filters *arg1 = (search_filters *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_filters **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->query = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchFilters_1query_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_filters *arg1 = (search_filters *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_filters **)&jarg1; 
  result = (json_object *) ((arg1)->query);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchFilters_1sort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_filters *arg1 = (search_filters *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_filters **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->sort = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchFilters_1sort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_filters *arg1 = (search_filters *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_filters **)&jarg1; 
  result = (json_object *) ((arg1)->sort);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchFilters_1aggregations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_filters *arg1 = (search_filters *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_filters **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->aggregations = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchFilters_1aggregations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_filters *arg1 = (search_filters *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_filters **)&jarg1; 
  result = (json_object *) ((arg1)->aggregations);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchFilters_1search_1after_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_filters *arg1 = (search_filters *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_filters **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->search_after = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchFilters_1search_1after_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_filters *arg1 = (search_filters *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_filters **)&jarg1; 
  result = (json_object *) ((arg1)->search_after);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1SearchFilters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  search_filters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (search_filters *)new search_filters();
  *(search_filters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1SearchFilters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  search_filters *arg1 = (search_filters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(search_filters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1search_1hits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  profile_search *arg1 = (profile_search *) 0 ;
  profile *arg2 = (profile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(profile_search **)&jarg1; 
  arg2 = *(profile **)&jarg2; 
  if (arg1) (arg1)->hits = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1search_1hits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profile_search *arg1 = (profile_search *) 0 ;
  profile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_search **)&jarg1; 
  result = (profile *) ((arg1)->hits);
  *(profile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1search_1hits_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  profile_search *arg1 = (profile_search *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_search **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->hits_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1search_1hits_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profile_search *arg1 = (profile_search *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_search **)&jarg1; 
  result =  ((arg1)->hits_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1search_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  profile_search *arg1 = (profile_search *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_search **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1search_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  profile_search *arg1 = (profile_search *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_search **)&jarg1; 
  result = (unsigned int) ((arg1)->total);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1search_1scroll_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  profile_search *arg1 = (profile_search *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_search **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scroll_id;
    if (arg2) {
      arg1->scroll_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scroll_id, (const char *)arg2);
    } else {
      arg1->scroll_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_profile_1search_1scroll_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  profile_search *arg1 = (profile_search *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_search **)&jarg1; 
  result = (char *) ((arg1)->scroll_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1profile_1search(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  profile_search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (profile_search *)new profile_search();
  *(profile_search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1profile_1search(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  profile_search *arg1 = (profile_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(profile_search **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1search_1hits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  role_search *arg1 = (role_search *) 0 ;
  role *arg2 = (role *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(role_search **)&jarg1; 
  arg2 = *(role **)&jarg2; 
  if (arg1) (arg1)->hits = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1search_1hits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  role_search *arg1 = (role_search *) 0 ;
  role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role_search **)&jarg1; 
  result = (role *) ((arg1)->hits);
  *(role **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1search_1hits_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  role_search *arg1 = (role_search *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role_search **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->hits_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1search_1hits_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  role_search *arg1 = (role_search *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role_search **)&jarg1; 
  result =  ((arg1)->hits_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1search_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  role_search *arg1 = (role_search *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role_search **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_role_1search_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  role_search *arg1 = (role_search *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role_search **)&jarg1; 
  result = (unsigned int) ((arg1)->total);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1role_1search(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  role_search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (role_search *)new role_search();
  *(role_search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1role_1search(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  role_search *arg1 = (role_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(role_search **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1search_1hits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  user_search *arg1 = (user_search *) 0 ;
  user *arg2 = (user *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user_search **)&jarg1; 
  arg2 = *(user **)&jarg2; 
  if (arg1) (arg1)->hits = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1search_1hits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_search *arg1 = (user_search *) 0 ;
  user *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_search **)&jarg1; 
  result = (user *) ((arg1)->hits);
  *(user **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1search_1hits_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  user_search *arg1 = (user_search *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_search **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->hits_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1search_1hits_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_search *arg1 = (user_search *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_search **)&jarg1; 
  result =  ((arg1)->hits_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1search_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  user_search *arg1 = (user_search *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_search **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1search_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  user_search *arg1 = (user_search *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_search **)&jarg1; 
  result = (unsigned int) ((arg1)->total);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1search_1scroll_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  user_search *arg1 = (user_search *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_search **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scroll_id;
    if (arg2) {
      arg1->scroll_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scroll_id, (const char *)arg2);
    } else {
      arg1->scroll_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_user_1search_1scroll_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  user_search *arg1 = (user_search *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_search **)&jarg1; 
  result = (char *) ((arg1)->scroll_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1user_1search(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  user_search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (user_search *)new user_search();
  *(user_search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1user_1search(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  user_search *arg1 = (user_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(user_search **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_ack_1result_1acknowledged_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ack_result *arg1 = (ack_result *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ack_result **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->acknowledged = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_ack_1result_1acknowledged_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ack_result *arg1 = (ack_result *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ack_result **)&jarg1; 
  result = (bool) ((arg1)->acknowledged);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_ack_1result_1shards_1acknowledged_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ack_result *arg1 = (ack_result *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ack_result **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shards_acknowledged = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_ack_1result_1shards_1acknowledged_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ack_result *arg1 = (ack_result *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ack_result **)&jarg1; 
  result = (bool) ((arg1)->shards_acknowledged);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1ack_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ack_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ack_result *)new ack_result();
  *(ack_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1ack_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ack_result *arg1 = (ack_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ack_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_ShardsResult_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  shards_result *arg1 = (shards_result *) 0 ;
  shards *arg2 = (shards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shards_result **)&jarg1; 
  arg2 = *(shards **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_ShardsResult_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shards_result *arg1 = (shards_result *) 0 ;
  shards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shards_result **)&jarg1; 
  result = (shards *) ((arg1)->result);
  *(shards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1ShardsResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shards_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shards_result *)new shards_result();
  *(shards_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1ShardsResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shards_result *arg1 = (shards_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shards_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1strict_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  specification *arg1 = (specification *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->strict = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1strict_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  specification *arg1 = (specification *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification **)&jarg1; 
  result = (bool) ((arg1)->strict);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  specification *arg1 = (specification *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(specification **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->fields = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specification *arg1 = (specification *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification **)&jarg1; 
  result = (json_object *) ((arg1)->fields);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1validators_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  specification *arg1 = (specification *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(specification **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->validators = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1validators_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specification *arg1 = (specification *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification **)&jarg1; 
  result = (json_object *) ((arg1)->validators);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1specification(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  specification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (specification *)new specification();
  *(specification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1specification(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  specification *arg1 = (specification *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(specification **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1entry_1validation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  specification_entry *arg1 = (specification_entry *) 0 ;
  specification *arg2 = (specification *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(specification_entry **)&jarg1; 
  arg2 = *(specification **)&jarg2; 
  if (arg1) (arg1)->validation = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1entry_1validation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specification_entry *arg1 = (specification_entry *) 0 ;
  specification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_entry **)&jarg1; 
  result = (specification *) ((arg1)->validation);
  *(specification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1entry_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  specification_entry *arg1 = (specification_entry *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_entry **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->index;
    if (arg2) {
      arg1->index = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->index, (const char *)arg2);
    } else {
      arg1->index = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1entry_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  specification_entry *arg1 = (specification_entry *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_entry **)&jarg1; 
  result = (char *) ((arg1)->index);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1entry_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  specification_entry *arg1 = (specification_entry *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_entry **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->collection;
    if (arg2) {
      arg1->collection = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->collection, (const char *)arg2);
    } else {
      arg1->collection = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1entry_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  specification_entry *arg1 = (specification_entry *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_entry **)&jarg1; 
  result = (char *) ((arg1)->collection);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1specification_1entry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  specification_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (specification_entry *)new specification_entry();
  *(specification_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1specification_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  specification_entry *arg1 = (specification_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(specification_entry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  specification_result *arg1 = (specification_result *) 0 ;
  specification *arg2 = (specification *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(specification_result **)&jarg1; 
  arg2 = *(specification **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specification_result *arg1 = (specification_result *) 0 ;
  specification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_result **)&jarg1; 
  result = (specification *) ((arg1)->result);
  *(specification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1specification_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  specification_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (specification_result *)new specification_result();
  *(specification_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1specification_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  specification_result *arg1 = (specification_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(specification_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1documents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_result *arg1 = (search_result *) 0 ;
  document *arg2 = (document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_result **)&jarg1; 
  arg2 = *(document **)&jarg2; 
  if (arg1) (arg1)->documents = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1documents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result = (document *) ((arg1)->documents);
  *(document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1documents_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  search_result *arg1 = (search_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->documents_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1documents_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result =  ((arg1)->documents_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1fetched_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  search_result *arg1 = (search_result *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->fetched = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1fetched_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result = (unsigned int) ((arg1)->fetched);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  search_result *arg1 = (search_result *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result = (unsigned int) ((arg1)->total);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1aggregations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_result *arg1 = (search_result *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_result **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->aggregations = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1aggregations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result = (json_object *) ((arg1)->aggregations);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1filters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_result *arg1 = (search_result *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_result **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  if (arg1) (arg1)->filters = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1filters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  search_filters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result = (search_filters *) ((arg1)->filters);
  *(search_filters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1options_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_result *arg1 = (search_result *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_result **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  if (arg1) (arg1)->options = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  query_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result = (query_options *) ((arg1)->options);
  *(query_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_result *arg1 = (search_result *) 0 ;
  collection *arg2 = (collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_result **)&jarg1; 
  arg2 = *(collection **)&jarg2; 
  if (arg1) (arg1)->collection = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SearchResult_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result = (collection *) ((arg1)->collection);
  *(collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1SearchResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (search_result *)new search_result();
  *(search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1SearchResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  search_result *arg1 = (search_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(search_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_search_1profiles_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_profiles_result *arg1 = (search_profiles_result *) 0 ;
  profile_search *arg2 = (profile_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_profiles_result **)&jarg1; 
  arg2 = *(profile_search **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_search_1profiles_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_profiles_result *arg1 = (search_profiles_result *) 0 ;
  profile_search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_profiles_result **)&jarg1; 
  result = (profile_search *) ((arg1)->result);
  *(profile_search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1search_1profiles_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  search_profiles_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (search_profiles_result *)new search_profiles_result();
  *(search_profiles_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1search_1profiles_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  search_profiles_result *arg1 = (search_profiles_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(search_profiles_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_search_1roles_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_roles_result *arg1 = (search_roles_result *) 0 ;
  role_search *arg2 = (role_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_roles_result **)&jarg1; 
  arg2 = *(role_search **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_search_1roles_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_roles_result *arg1 = (search_roles_result *) 0 ;
  role_search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_roles_result **)&jarg1; 
  result = (role_search *) ((arg1)->result);
  *(role_search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1search_1roles_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  search_roles_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (search_roles_result *)new search_roles_result();
  *(search_roles_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1search_1roles_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  search_roles_result *arg1 = (search_roles_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(search_roles_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_search_1users_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  search_users_result *arg1 = (search_users_result *) 0 ;
  user_search *arg2 = (user_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(search_users_result **)&jarg1; 
  arg2 = *(user_search **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_search_1users_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_users_result *arg1 = (search_users_result *) 0 ;
  user_search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_users_result **)&jarg1; 
  result = (user_search *) ((arg1)->result);
  *(user_search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1search_1users_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  search_users_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (search_users_result *)new search_users_result();
  *(search_users_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1search_1users_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  search_users_result *arg1 = (search_users_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(search_users_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1hits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  specification_search *arg1 = (specification_search *) 0 ;
  specification_entry *arg2 = (specification_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(specification_search **)&jarg1; 
  arg2 = *(specification_entry **)&jarg2; 
  if (arg1) (arg1)->hits = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1hits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specification_search *arg1 = (specification_search *) 0 ;
  specification_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search **)&jarg1; 
  result = (specification_entry *) ((arg1)->hits);
  *(specification_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1hits_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  specification_search *arg1 = (specification_search *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->hits_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1hits_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specification_search *arg1 = (specification_search *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search **)&jarg1; 
  result =  ((arg1)->hits_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  specification_search *arg1 = (specification_search *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specification_search *arg1 = (specification_search *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search **)&jarg1; 
  result = (unsigned int) ((arg1)->total);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1scroll_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  specification_search *arg1 = (specification_search *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->scroll_id;
    if (arg2) {
      arg1->scroll_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->scroll_id, (const char *)arg2);
    } else {
      arg1->scroll_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1scroll_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  specification_search *arg1 = (specification_search *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search **)&jarg1; 
  result = (char *) ((arg1)->scroll_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1specification_1search(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  specification_search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (specification_search *)new specification_search();
  *(specification_search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1specification_1search(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  specification_search *arg1 = (specification_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(specification_search **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  specification_search_result *arg1 = (specification_search_result *) 0 ;
  specification_search *arg2 = (specification_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(specification_search_result **)&jarg1; 
  arg2 = *(specification_search **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_specification_1search_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specification_search_result *arg1 = (specification_search_result *) 0 ;
  specification_search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search_result **)&jarg1; 
  result = (specification_search *) ((arg1)->result);
  *(specification_search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1specification_1search_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  specification_search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (specification_search_result *)new specification_search_result();
  *(specification_search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1specification_1search_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  specification_search_result *arg1 = (specification_search_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(specification_search_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_mapping_1mapping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mapping *arg1 = (mapping *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mapping **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  if (arg1) (arg1)->mapping = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_mapping_1mapping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mapping *arg1 = (mapping *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mapping **)&jarg1; 
  result = (json_object *) ((arg1)->mapping);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_mapping_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mapping *arg1 = (mapping *) 0 ;
  collection *arg2 = (collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mapping **)&jarg1; 
  arg2 = *(collection **)&jarg2; 
  if (arg1) (arg1)->collection = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_mapping_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mapping *arg1 = (mapping *) 0 ;
  collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mapping **)&jarg1; 
  result = (collection *) ((arg1)->collection);
  *(collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mapping *arg1 = (mapping *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mapping **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_mapping_1result_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mapping_result *arg1 = (mapping_result *) 0 ;
  mapping *arg2 = (mapping *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mapping_result **)&jarg1; 
  arg2 = *(mapping **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_mapping_1result_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mapping_result *arg1 = (mapping_result *) 0 ;
  mapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mapping_result **)&jarg1; 
  result = (mapping *) ((arg1)->result);
  *(mapping **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1mapping_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mapping_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mapping_result *)new mapping_result();
  *(mapping_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1mapping_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mapping_result *arg1 = (mapping_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mapping_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_CollectionsList_1persisted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  collection_entry *arg1 = (collection_entry *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->persisted = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_CollectionsList_1persisted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  collection_entry *arg1 = (collection_entry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry **)&jarg1; 
  result = (bool) ((arg1)->persisted);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_CollectionsList_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  collection_entry *arg1 = (collection_entry *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_CollectionsList_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  collection_entry *arg1 = (collection_entry *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1CollectionsList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  collection_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (collection_entry *)new collection_entry();
  *(collection_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1CollectionsList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  collection_entry *arg1 = (collection_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(collection_entry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_CollectionsListResult_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  collection_entry_result *arg1 = (collection_entry_result *) 0 ;
  collection_entry *arg2 = (collection_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(collection_entry_result **)&jarg1; 
  arg2 = *(collection_entry **)&jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_CollectionsListResult_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  collection_entry_result *arg1 = (collection_entry_result *) 0 ;
  collection_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry_result **)&jarg1; 
  result = (collection_entry *) ((arg1)->result);
  *(collection_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_CollectionsListResult_1result_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  collection_entry_result *arg1 = (collection_entry_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->result_length = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_CollectionsListResult_1result_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  collection_entry_result *arg1 = (collection_entry_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry_result **)&jarg1; 
  result =  ((arg1)->result_length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1CollectionsListResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  collection_entry_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (collection_entry_result *)new collection_entry_result();
  *(collection_entry_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1CollectionsListResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  collection_entry_result *arg1 = (collection_entry_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(collection_entry_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI__1GoString_1_1p_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  _GoString_ *arg1 = (_GoString_ *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_GoString_ **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->p = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->p, (const char *)arg2);
    } else {
      arg1->p = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI__1GoString_1_1p_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  _GoString_ *arg1 = (_GoString_ *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_GoString_ **)&jarg1; 
  result = (char *) ((arg1)->p);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI__1GoString_1_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _GoString_ *arg1 = (_GoString_ *) 0 ;
  ptrdiff_t arg2 ;
  ptrdiff_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_GoString_ **)&jarg1; 
  argp2 = *(ptrdiff_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ptrdiff_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI__1GoString_1_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _GoString_ *arg1 = (_GoString_ *) 0 ;
  ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_GoString_ **)&jarg1; 
  result =  ((arg1)->n);
  *(ptrdiff_t **)&jresult = new ptrdiff_t((const ptrdiff_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1_1GoString_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _GoString_ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_GoString_ *)new _GoString_();
  *(_GoString_ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1_1GoString_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _GoString_ *arg1 = (_GoString_ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_GoString_ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_free_1char_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  char **arg1 = (char **) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (size_t)jarg2; 
  free_char_array(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_assign_1geopos(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4) {
  double (*arg1)[2] = (double (*)[2]) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double (**)[2])&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  assign_geopos((double (*)[2])arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoInterface_1t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GoInterface *arg1 = (GoInterface *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoInterface **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->t = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoInterface_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GoInterface *arg1 = (GoInterface *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoInterface **)&jarg1; 
  result = (void *) ((arg1)->t);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoInterface_1v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GoInterface *arg1 = (GoInterface *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoInterface **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoInterface_1v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GoInterface *arg1 = (GoInterface *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoInterface **)&jarg1; 
  result = (void *) ((arg1)->v);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1GoInterface(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GoInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GoInterface *)new GoInterface();
  *(GoInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1GoInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GoInterface *arg1 = (GoInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GoInterface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoSlice_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GoSlice *arg1 = (GoSlice *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoSlice **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoSlice_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GoSlice *arg1 = (GoSlice *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoSlice **)&jarg1; 
  result = (void *) ((arg1)->data);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoSlice_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GoSlice *arg1 = (GoSlice *) 0 ;
  GoInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoSlice **)&jarg1; 
  arg2 = (GoInt)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoSlice_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GoSlice *arg1 = (GoSlice *) 0 ;
  GoInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoSlice **)&jarg1; 
  result = (GoInt) ((arg1)->len);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoSlice_1cap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GoSlice *arg1 = (GoSlice *) 0 ;
  GoInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoSlice **)&jarg1; 
  arg2 = (GoInt)jarg2; 
  if (arg1) (arg1)->cap = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_GoSlice_1cap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GoSlice *arg1 = (GoSlice *) 0 ;
  GoInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GoSlice **)&jarg1; 
  result = (GoInt) ((arg1)->cap);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1GoSlice(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GoSlice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GoSlice *)new GoSlice();
  *(GoSlice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1GoSlice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GoSlice *arg1 = (GoSlice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GoSlice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1jwt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  kuzzle_set_jwt(arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1unset_1jwt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  kuzzle_unset_jwt(arg1);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1jwt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (char *)kuzzle_get_jwt(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1login(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  int *arg4 = (int *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (string_result *)kuzzle_login(arg1,arg2,arg3,arg4);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1logout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (char *)kuzzle_logout(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1check_1token(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  token_validity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (token_validity *)kuzzle_check_token(arg1,arg2);
  *(token_validity **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1create_1my_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (json_result *)kuzzle_create_my_credentials(arg1,arg2,arg3,arg4);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1delete_1my_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (bool_result *)kuzzle_delete_my_credentials(arg1,arg2,arg3);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1my_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (json_result *)kuzzle_get_my_credentials(arg1,arg2,arg3);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1update_1my_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (json_result *)kuzzle_update_my_credentials(arg1,arg2,arg3,arg4);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1validate_1my_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_validate_my_credentials(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1my_1rights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (json_result *)kuzzle_get_my_rights(arg1,arg2);
  *(json_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1update_1self(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  user_data *arg2 = (user_data *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(user_data **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (json_result *)kuzzle_update_self(arg1,arg2,arg3);
  *(json_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1who_1am_1i(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  user_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (user_result *)kuzzle_who_am_i(arg1);
  *(user_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_unregisterCollection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  collection *arg1 = (collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  unregisterCollection(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1new_1collection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  collection *arg1 = (collection *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  kuzzle_new_collection(arg1,arg2,arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (bool_result *)kuzzle_collection_create(arg1,arg2);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1publish_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (bool_result *)kuzzle_collection_publish_message(arg1,arg2,arg3);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1truncate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (bool_result *)kuzzle_collection_truncate(arg1,arg2);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1subscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  room_options *arg3 = (room_options *) 0 ;
  kuzzle_notification_listener arg4 = (kuzzle_notification_listener) 0 ;
  void *arg5 = (void *) 0 ;
  room_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(room_options **)&jarg3; 
  arg4 = *(kuzzle_notification_listener *)&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (room_result *)kuzzle_collection_subscribe(arg1,arg2,arg3,arg4,arg5);
  *(room_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_collection_count(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1create_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  document *arg3 = (document *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  document_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(document **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (document_result *)kuzzle_collection_create_document(arg1,arg2,arg3,arg4);
  *(document_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1delete_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_result *)kuzzle_collection_delete_document(arg1,arg2,arg3);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1document_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (bool_result *)kuzzle_collection_document_exists(arg1,arg2,arg3);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1fetch_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  document_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (document_result *)kuzzle_collection_fetch_document(arg1,arg2,arg3);
  *(document_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1replace_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  document *arg3 = (document *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  document_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(document **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (document_result *)kuzzle_collection_replace_document(arg1,arg2,arg3,arg4);
  *(document_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1update_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  document *arg3 = (document *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  document_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(document **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (document_result *)kuzzle_collection_update_document(arg1,arg2,arg3,arg4);
  *(document_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1scroll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (search_result *)kuzzle_collection_scroll(arg1,arg2,arg3);
  *(search_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (search_result *)kuzzle_collection_search(arg1,arg2,arg3);
  *(search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1m_1create_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  document **arg2 = (document **) 0 ;
  unsigned int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  document_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(document ***)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (document_array_result *)kuzzle_collection_m_create_document(arg1,arg2,arg3,arg4);
  *(document_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1m_1create_1or_1replace_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  document **arg2 = (document **) 0 ;
  unsigned int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  document_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(document ***)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (document_array_result *)kuzzle_collection_m_create_or_replace_document(arg1,arg2,arg3,arg4);
  *(document_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1m_1delete_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (string_array_result *)kuzzle_collection_m_delete_document(arg1,arg2,arg3,arg4);
  *(string_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1m_1get_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  document_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (document_array_result *)kuzzle_collection_m_get_document(arg1,arg2,arg3,arg4);
  *(document_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1m_1replace_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  document **arg2 = (document **) 0 ;
  unsigned int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  document_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(document ***)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (document_array_result *)kuzzle_collection_m_replace_document(arg1,arg2,arg3,arg4);
  *(document_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1m_1update_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  document **arg2 = (document **) 0 ;
  unsigned int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  document_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(document ***)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (document_array_result *)kuzzle_collection_m_update_document(arg1,arg2,arg3,arg4);
  *(document_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1new_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  mapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  result = (mapping *)kuzzle_new_mapping(arg1);
  *(mapping **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1get_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  mapping_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (mapping_result *)kuzzle_collection_get_mapping(arg1,arg2);
  *(mapping_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1mapping_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mapping *arg1 = (mapping *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mapping **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (bool_result *)kuzzle_mapping_apply(arg1,arg2);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1mapping_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mapping *arg1 = (mapping *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mapping **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (bool_result *)kuzzle_mapping_refresh(arg1,arg2);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1mapping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mapping *arg1 = (mapping *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mapping **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  kuzzle_mapping_set(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1delete_1specifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (bool_result *)kuzzle_collection_delete_specifications(arg1,arg2);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1get_1specifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  specification_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (specification_result *)kuzzle_collection_get_specifications(arg1,arg2);
  *(specification_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1scroll_1specifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  specification_search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (specification_search_result *)kuzzle_collection_scroll_specifications(arg1,arg2,arg3);
  *(specification_search_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1search_1specifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  specification_search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (specification_search_result *)kuzzle_collection_search_specifications(arg1,arg2,arg3);
  *(specification_search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1update_1specifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  specification *arg2 = (specification *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  specification_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(specification **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (specification_result *)kuzzle_collection_update_specifications(arg1,arg2,arg3);
  *(specification_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1collection_1validate_1specifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  collection *arg1 = (collection *) 0 ;
  specification *arg2 = (specification *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(collection **)&jarg1; 
  arg2 = *(specification **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (bool_result *)kuzzle_collection_validate_specifications(arg1,arg2,arg3);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1kuzzle_1request(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle_request *arg1 = (kuzzle_request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_request **)&jarg1; 
  kuzzle_free_kuzzle_request(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1query_1object(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  query_object *arg1 = (query_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_object **)&jarg1; 
  kuzzle_free_query_object(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1offline_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  offline_queue *arg1 = (offline_queue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(offline_queue **)&jarg1; 
  kuzzle_free_offline_queue(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1query_1options(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  query_options *arg1 = (query_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(query_options **)&jarg1; 
  kuzzle_free_query_options(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1room_1options(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  room_options *arg1 = (room_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_options **)&jarg1; 
  kuzzle_free_room_options(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1options(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  options *arg1 = (options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(options **)&jarg1; 
  kuzzle_free_options(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1meta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  meta *arg1 = (meta *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(meta **)&jarg1; 
  kuzzle_free_meta(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1policy_1restriction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  policy_restriction *arg1 = (policy_restriction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy_restriction **)&jarg1; 
  kuzzle_free_policy_restriction(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1policy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  policy *arg1 = (policy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(policy **)&jarg1; 
  kuzzle_free_policy(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1profile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  profile *arg1 = (profile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile **)&jarg1; 
  kuzzle_free_profile(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1role(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  role *arg1 = (role *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role **)&jarg1; 
  kuzzle_free_role(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1user(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  user *arg1 = (user *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  kuzzle_free_user(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1user_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  user_data *arg1 = (user_data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_data **)&jarg1; 
  kuzzle_free_user_data(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1collection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  collection *arg1 = (collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection **)&jarg1; 
  kuzzle_free_collection(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  document *arg1 = (document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  kuzzle_free_document(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1document_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  document_result *arg1 = (document_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_result **)&jarg1; 
  kuzzle_free_document_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1notification_1content(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  notification_content *arg1 = (notification_content *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_content **)&jarg1; 
  kuzzle_free_notification_content(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1notification_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  notification_result *arg1 = (notification_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  kuzzle_free_notification_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1profile_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  profile_result *arg1 = (profile_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_result **)&jarg1; 
  kuzzle_free_profile_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1profiles_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  profiles_result *arg1 = (profiles_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profiles_result **)&jarg1; 
  kuzzle_free_profiles_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1role_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  role_result *arg1 = (role_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role_result **)&jarg1; 
  kuzzle_free_role_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1user_1right(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  user_right *arg1 = (user_right *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_right **)&jarg1; 
  kuzzle_free_user_right(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1user_1rights_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  user_rights_result *arg1 = (user_rights_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_rights_result **)&jarg1; 
  kuzzle_free_user_rights_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1user_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  user_result *arg1 = (user_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_result **)&jarg1; 
  kuzzle_free_user_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1statistics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  statistics *arg1 = (statistics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics **)&jarg1; 
  kuzzle_free_statistics(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1statistics_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  statistics_result *arg1 = (statistics_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(statistics_result **)&jarg1; 
  kuzzle_free_statistics_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1all_1statistics_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  all_statistics_result *arg1 = (all_statistics_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(all_statistics_result **)&jarg1; 
  kuzzle_free_all_statistics_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1geopos_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  geopos_result *arg1 = (geopos_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geopos_result **)&jarg1; 
  kuzzle_free_geopos_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1token_1validity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  token_validity *arg1 = (token_validity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(token_validity **)&jarg1; 
  kuzzle_free_token_validity(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1kuzzle_1response(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle_response *arg1 = (kuzzle_response *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_response **)&jarg1; 
  kuzzle_free_kuzzle_response(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1json_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  json_result *arg1 = (json_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_result **)&jarg1; 
  kuzzle_free_json_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1json_1array_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  json_array_result *arg1 = (json_array_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_array_result **)&jarg1; 
  kuzzle_free_json_array_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1bool_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  bool_result *arg1 = (bool_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bool_result **)&jarg1; 
  kuzzle_free_bool_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1int_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int_result *arg1 = (int_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int_result **)&jarg1; 
  kuzzle_free_int_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1double_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  double_result *arg1 = (double_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(double_result **)&jarg1; 
  kuzzle_free_double_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1int_1array_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int_array_result *arg1 = (int_array_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int_array_result **)&jarg1; 
  kuzzle_free_int_array_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1string_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  string_result *arg1 = (string_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(string_result **)&jarg1; 
  kuzzle_free_string_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1string_1array_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  string_array_result *arg1 = (string_array_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(string_array_result **)&jarg1; 
  kuzzle_free_string_array_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1search_1filters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  search_filters *arg1 = (search_filters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_filters **)&jarg1; 
  kuzzle_free_search_filters(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1profile_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  profile_search *arg1 = (profile_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile_search **)&jarg1; 
  kuzzle_free_profile_search(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1role_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  role_search *arg1 = (role_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role_search **)&jarg1; 
  kuzzle_free_role_search(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1ack_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ack_result *arg1 = (ack_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ack_result **)&jarg1; 
  kuzzle_free_ack_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1shards_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  shards_result *arg1 = (shards_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shards_result **)&jarg1; 
  kuzzle_free_shards_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1specification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  specification *arg1 = (specification *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification **)&jarg1; 
  kuzzle_free_specification(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1specification_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  specification_entry *arg1 = (specification_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_entry **)&jarg1; 
  kuzzle_free_specification_entry(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1specification_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  specification_result *arg1 = (specification_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_result **)&jarg1; 
  kuzzle_free_specification_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1search_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  search_result *arg1 = (search_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  kuzzle_free_search_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1search_1profiles_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  search_profiles_result *arg1 = (search_profiles_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_profiles_result **)&jarg1; 
  kuzzle_free_search_profiles_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1search_1roles_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  search_roles_result *arg1 = (search_roles_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_roles_result **)&jarg1; 
  kuzzle_free_search_roles_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1specification_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  specification_search *arg1 = (specification_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search **)&jarg1; 
  kuzzle_free_specification_search(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1specification_1search_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  specification_search_result *arg1 = (specification_search_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specification_search_result **)&jarg1; 
  kuzzle_free_specification_search_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mapping *arg1 = (mapping *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mapping **)&jarg1; 
  kuzzle_free_mapping(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1mapping_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mapping_result *arg1 = (mapping_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mapping_result **)&jarg1; 
  kuzzle_free_mapping_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1void_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void_result *arg1 = (void_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(void_result **)&jarg1; 
  kuzzle_free_void_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1collection_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  collection_entry *arg1 = (collection_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry **)&jarg1; 
  kuzzle_free_collection_entry(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1collection_1entry_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  collection_entry_result *arg1 = (collection_entry_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(collection_entry_result **)&jarg1; 
  kuzzle_free_collection_entry_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1user_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  user_search *arg1 = (user_search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user_search **)&jarg1; 
  kuzzle_free_user_search(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1search_1users_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  search_users_result *arg1 = (search_users_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_users_result **)&jarg1; 
  kuzzle_free_search_users_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1document_1array_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  document_array_result *arg1 = (document_array_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document_array_result **)&jarg1; 
  kuzzle_free_document_array_result(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_unregisterDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  document *arg1 = (document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  unregisterDocument(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1new_1document(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  document *arg1 = (document *) 0 ;
  collection *arg2 = (collection *) 0 ;
  char *arg3 = (char *) 0 ;
  json_object *arg4 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(collection **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(json_object **)&jarg4; 
  kuzzle_new_document(arg1,arg2,arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1document_1subscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  room_options *arg2 = (room_options *) 0 ;
  kuzzle_notification_listener arg3 = (kuzzle_notification_listener) 0 ;
  void *arg4 = (void *) 0 ;
  room_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(room_options **)&jarg2; 
  arg3 = *(kuzzle_notification_listener *)&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (room_result *)kuzzle_document_subscribe(arg1,arg2,arg3,arg4);
  *(room_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1document_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  document_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (document_result *)kuzzle_document_save(arg1,arg2);
  *(document_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1document_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  document_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (document_result *)kuzzle_document_refresh(arg1,arg2);
  *(document_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1document_1publish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (bool_result *)kuzzle_document_publish(arg1,arg2);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1document_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (bool_result *)kuzzle_document_exists(arg1,arg2);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1document_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_document_delete(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1document_1set_1content(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  document *arg1 = (document *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  _Bool arg3 ;
  _Bool *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(document **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  argp3 = *(_Bool **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _Bool");
    return ;
  }
  arg3 = *argp3; 
  kuzzle_document_set_content(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1document_1get_1content(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  document *arg1 = (document *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(document **)&jarg1; 
  result = (json_object *)kuzzle_document_get_content(arg1);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_unregisterIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  unregisterIndex(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1new_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  kuzzle_new_index(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  char *arg2 = (char *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (void_result *)kuzzle_index_create(arg1,arg2);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  char *arg2 = (char *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (void_result *)kuzzle_index_delete(arg1,arg2);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1mdelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (string_array_result *)kuzzle_index_mdelete(arg1,arg2,arg3);
  *(string_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  char *arg2 = (char *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool_result *)kuzzle_index_exists(arg1,arg2);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  char *arg2 = (char *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (void_result *)kuzzle_index_refresh(arg1,arg2);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1refresh_1internal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  result = (void_result *)kuzzle_index_refresh_internal(arg1);
  *(void_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1set_1auto_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  char *arg2 = (char *) 0 ;
  _Bool arg3 ;
  _Bool *argp3 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(_Bool **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _Bool");
    return 0;
  }
  arg3 = *argp3; 
  result = (void_result *)kuzzle_index_set_auto_refresh(arg1,arg2,arg3);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1get_1auto_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  char *arg2 = (char *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool_result *)kuzzle_index_get_auto_refresh(arg1,arg2);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1index_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle_index *arg1 = (kuzzle_index *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle_index **)&jarg1; 
  result = (string_result *)kuzzle_index_list(arg1);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1json_1new(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  json_object *arg1 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  kuzzle_json_new(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1json_1put(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(void **)&jarg3; 
  arg4 = (int)jarg4; 
  kuzzle_json_put(arg1,arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1json_1get_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)kuzzle_json_get_string(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1json_1get_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)kuzzle_json_get_int(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1json_1get_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)kuzzle_json_get_double(arg1,arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1json_1get_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  json_bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = kuzzle_json_get_bool(arg1,arg2);
  *(json_bool **)&jresult = new json_bool((const json_bool &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1json_1get_1json_1object(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (json_object *)kuzzle_json_get_json_object(arg1,arg2);
  *(json_object **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1free_1json_1object(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  json_object *arg1 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  kuzzle_free_json_object(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_unregisterKuzzle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  unregisterKuzzle(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1new_1kuzzle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  options *arg4 = (options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(options **)&jarg4; 
  kuzzle_new_kuzzle(arg1,arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (char *)kuzzle_connect(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  kuzzle_disconnect(arg1);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1default_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (char *)kuzzle_get_default_index(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1default_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)kuzzle_set_default_index(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1offline_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  offline_queue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (offline_queue *)kuzzle_get_offline_queue(arg1);
  *(offline_queue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1flush_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  kuzzle_flush_queue(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1replay_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  kuzzle_replay_queue(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1start_1queuing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  kuzzle_start_queuing(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1stop_1queuing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  kuzzle_stop_queuing(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1add_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  kuzzle_event_listener arg3 = (kuzzle_event_listener) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(kuzzle_event_listener *)&jarg3; 
  arg4 = *(void **)&jarg4; 
  kuzzle_add_listener(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1once(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  kuzzle_event_listener arg3 = (kuzzle_event_listener) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(kuzzle_event_listener *)&jarg3; 
  arg4 = *(void **)&jarg4; 
  kuzzle_once(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1listener_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  GoInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (GoInt)kuzzle_listener_count(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1remove_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(void **)&jarg3; 
  kuzzle_remove_listener(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1remove_1all_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  kuzzle_remove_all_listeners(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1auto_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  _Bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = kuzzle_get_auto_queue(arg1);
  *(_Bool **)&jresult = new _Bool((const _Bool &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1auto_1queue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  _Bool arg2 ;
  _Bool *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  argp2 = *(_Bool **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _Bool");
    return ;
  }
  arg2 = *argp2; 
  kuzzle_set_auto_queue(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1auto_1reconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  _Bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = kuzzle_get_auto_reconnect(arg1);
  *(_Bool **)&jresult = new _Bool((const _Bool &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1auto_1resubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  _Bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = kuzzle_get_auto_resubscribe(arg1);
  *(_Bool **)&jresult = new _Bool((const _Bool &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1auto_1replay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  _Bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = kuzzle_get_auto_replay(arg1);
  *(_Bool **)&jresult = new _Bool((const _Bool &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1auto_1replay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  _Bool arg2 ;
  _Bool *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  argp2 = *(_Bool **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _Bool");
    return ;
  }
  arg2 = *argp2; 
  kuzzle_set_auto_replay(arg1,arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1host(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (char *)kuzzle_get_host(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1offline_1queue_1loader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_offline_queue_loader result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (kuzzle_offline_queue_loader)kuzzle_get_offline_queue_loader(arg1);
  *(kuzzle_offline_queue_loader *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1offline_1queue_1loader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_offline_queue_loader arg2 = (kuzzle_offline_queue_loader) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(kuzzle_offline_queue_loader *)&jarg2; 
  kuzzle_set_offline_queue_loader(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (int)kuzzle_get_port(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1queue_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_queue_filter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (kuzzle_queue_filter)kuzzle_get_queue_filter(arg1);
  *(kuzzle_queue_filter *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1queue_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_queue_filter arg2 = (kuzzle_queue_filter) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(kuzzle_queue_filter *)&jarg2; 
  kuzzle_set_queue_filter(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1queue_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (int)kuzzle_get_queue_max_size(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1queue_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  kuzzle_set_queue_max_size(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1queue_1ttl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (int)kuzzle_get_queue_ttl(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1queue_1ttl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  kuzzle_set_queue_ttl(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1replay_1interval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (int)kuzzle_get_replay_interval(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1replay_1interval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  kuzzle_set_replay_interval(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1reconnection_1delay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (int)kuzzle_get_reconnection_delay(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1ssl_1connection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  _Bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = kuzzle_get_ssl_connection(arg1);
  *(_Bool **)&jresult = new _Bool((const _Bool &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1volatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzle **)&jarg1; 
  result = (json_object *)kuzzle_get_volatile(arg1);
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1set_1volatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzle *arg1 = (kuzzle *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  kuzzle_set_volatile(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_append(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1bitcount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_bitcount(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1bitop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  size_t arg5 ;
  query_options *arg6 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(char ***)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(query_options **)&jarg6; 
  result = (int_result *)kuzzle_ms_bitop(arg1,arg2,arg3,arg4,arg5,arg6);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1bitpos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned char)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_bitpos(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1dbsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (int_result *)kuzzle_ms_dbsize(arg1,arg2);
  *(int_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1decr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_decr(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1decrby(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_decrby(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_del(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_exists(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1expire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned long)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_expire(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1expireat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long long arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_expireat(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1flushdb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (void_result *)kuzzle_ms_flushdb(arg1,arg2);
  *(void_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1geoadd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object **arg3 = (json_object **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_geoadd(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1geodist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  double_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (double_result *)kuzzle_ms_geodist(arg1,arg2,arg3,arg4,arg5);
  *(double_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1geohash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (string_array_result *)kuzzle_ms_geohash(arg1,arg2,arg3,arg4,arg5);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1geopos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  geopos_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (geopos_result *)kuzzle_ms_geopos(arg1,arg2,arg3,arg4,arg5);
  *(geopos_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1georadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jstring jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  query_options *arg7 = (query_options *) 0 ;
  json_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = *(query_options **)&jarg7; 
  result = (json_array_result *)kuzzle_ms_georadius(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(json_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1georadiusbymember(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  query_options *arg6 = (query_options *) 0 ;
  json_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(query_options **)&jarg6; 
  result = (json_array_result *)kuzzle_ms_georadiusbymember(arg1,arg2,arg3,arg4,arg5,arg6);
  *(json_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_result *)kuzzle_ms_get(arg1,arg2,arg3);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1getbit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_getbit(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1getrange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (string_result *)kuzzle_ms_getrange(arg1,arg2,arg3,arg4,arg5);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1getset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (string_result *)kuzzle_ms_getset(arg1,arg2,arg3,arg4);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hdel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_hdel(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hexists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_hexists(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (string_result *)kuzzle_ms_hget(arg1,arg2,arg3,arg4);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hgetall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (json_result *)kuzzle_ms_hgetall(arg1,arg2,arg3);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hincrby(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_hincrby(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hincrbyfloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  double_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (double_result *)kuzzle_ms_hincrbyfloat(arg1,arg2,arg3,arg4,arg5);
  *(double_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hkeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_array_result *)kuzzle_ms_hkeys(arg1,arg2,arg3);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hlen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_hlen(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hmget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (string_array_result *)kuzzle_ms_hmget(arg1,arg2,arg3,arg4,arg5);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hmset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object **arg3 = (json_object **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (void_result *)kuzzle_ms_hmset(arg1,arg2,arg3,arg4,arg5);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hscan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (json_result *)kuzzle_ms_hscan(arg1,arg2,arg3,arg4);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (bool_result *)kuzzle_ms_hset(arg1,arg2,arg3,arg4,arg5);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hsetnx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (bool_result *)kuzzle_ms_hsetnx(arg1,arg2,arg3,arg4,arg5);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hstrlen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_hstrlen(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1hvals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_array_result *)kuzzle_ms_hvals(arg1,arg2,arg3);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1incr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_incr(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1incrby(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_incrby(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1incrbyfloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  double_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (double_result *)kuzzle_ms_incrbyfloat(arg1,arg2,arg3,arg4);
  *(double_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_array_result *)kuzzle_ms_keys(arg1,arg2,arg3);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1lindex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (string_result *)kuzzle_ms_lindex(arg1,arg2,arg3,arg4);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1linsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  query_options *arg6 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(query_options **)&jarg6; 
  result = (int_result *)kuzzle_ms_linsert(arg1,arg2,arg3,arg4,arg5,arg6);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1llen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_llen(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1lpop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_result *)kuzzle_ms_lpop(arg1,arg2,arg3);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1lpush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_lpush(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1lpushx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_lpushx(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1lrange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (string_array_result *)kuzzle_ms_lrange(arg1,arg2,arg3,arg4,arg5);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1lrem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_lrem(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1lset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (void_result *)kuzzle_ms_lset(arg1,arg2,arg3,arg4,arg5);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1ltrim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (void_result *)kuzzle_ms_ltrim(arg1,arg2,arg3,arg4,arg5);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1mget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (string_array_result *)kuzzle_ms_mget(arg1,arg2,arg3,arg4);
  *(string_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1mset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  json_object **arg2 = (json_object **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(json_object ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (void_result *)kuzzle_ms_mset(arg1,arg2,arg3,arg4);
  *(void_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1msetnx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  json_object **arg2 = (json_object **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(json_object ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_msetnx(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1object(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (string_result *)kuzzle_ms_object(arg1,arg2,arg3,arg4);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1persist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (bool_result *)kuzzle_ms_persist(arg1,arg2,arg3);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1pexpire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned long)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_pexpire(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1pexpireat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long long arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_pexpireat(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1pfadd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (bool_result *)kuzzle_ms_pfadd(arg1,arg2,arg3,arg4,arg5);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1pfcount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_pfcount(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1pfmerge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (void_result *)kuzzle_ms_pfmerge(arg1,arg2,arg3,arg4,arg5);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1ping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_ms_ping(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1psetex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (void_result *)kuzzle_ms_psetex(arg1,arg2,arg3,arg4,arg5);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1pttl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_pttl(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1randomkey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_ms_randomkey(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1rename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (void_result *)kuzzle_ms_rename(arg1,arg2,arg3,arg4);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1renamenx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_renamenx(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1rpop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_result *)kuzzle_ms_rpop(arg1,arg2,arg3);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1rpoplpush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (string_result *)kuzzle_ms_rpoplpush(arg1,arg2,arg3,arg4);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1rpush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_rpush(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1rpushx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_rpushx(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sadd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_sadd(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1scan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  int arg2 ;
  query_options *arg3 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (json_result *)kuzzle_ms_scan(arg1,arg2,arg3);
  *(json_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1scard(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_scard(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sdiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (string_array_result *)kuzzle_ms_sdiff(arg1,arg2,arg3,arg4,arg5);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sdiffstore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  query_options *arg6 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(query_options **)&jarg6; 
  result = (int_result *)kuzzle_ms_sdiffstore(arg1,arg2,arg3,arg4,arg5,arg6);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (void_result *)kuzzle_ms_set(arg1,arg2,arg3,arg4);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1setex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (void_result *)kuzzle_ms_setex(arg1,arg2,arg3,arg4,arg5);
  *(void_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1setnx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_setnx(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sinter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (string_array_result *)kuzzle_ms_sinter(arg1,arg2,arg3,arg4);
  *(string_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sinterstore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_sinterstore(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sismember(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (bool_result *)kuzzle_ms_sismember(arg1,arg2,arg3,arg4);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1smembers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_array_result *)kuzzle_ms_smembers(arg1,arg2,arg3);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1smove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (bool_result *)kuzzle_ms_smove(arg1,arg2,arg3,arg4,arg5);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_array_result *)kuzzle_ms_sort(arg1,arg2,arg3);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1spop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_array_result *)kuzzle_ms_spop(arg1,arg2,arg3);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1srandmember(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_array_result *)kuzzle_ms_srandmember(arg1,arg2,arg3);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1srem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_srem(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sscan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (json_result *)kuzzle_ms_sscan(arg1,arg2,arg3,arg4);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1strlen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_strlen(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sunion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (string_array_result *)kuzzle_ms_sunion(arg1,arg2,arg3,arg4);
  *(string_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1sunionstore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_sunionstore(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  int_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (int_array_result *)kuzzle_ms_time(arg1,arg2);
  *(int_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1touch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_touch(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1ttl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_ttl(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (string_result *)kuzzle_ms_type(arg1,arg2,arg3);
  *(string_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zadd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object **arg3 = (json_object **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_zadd(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zcard(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (int_result *)kuzzle_ms_zcard(arg1,arg2,arg3);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zcount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_zcount(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zincrby(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  double_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (double_result *)kuzzle_ms_zincrby(arg1,arg2,arg3,arg4,arg5);
  *(double_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zinterstore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_zinterstore(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zlexcount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_zlexcount(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  json_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (json_array_result *)kuzzle_ms_zrange(arg1,arg2,arg3,arg4,arg5);
  *(json_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrangebylex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (string_array_result *)kuzzle_ms_zrangebylex(arg1,arg2,arg3,arg4,arg5);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrangebyscore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  json_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (json_array_result *)kuzzle_ms_zrangebyscore(arg1,arg2,arg3,arg4,arg5);
  *(json_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_zrank(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_zrem(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zremrangebylex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_zremrangebylex(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zremrangebyrank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_zremrangebyrank(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zremrangebyscore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (int_result *)kuzzle_ms_zremrangebyscore(arg1,arg2,arg3,arg4,arg5);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrevrange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  json_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (json_array_result *)kuzzle_ms_zrevrange(arg1,arg2,arg3,arg4,arg5);
  *(json_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrevrangebylex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  query_options *arg5 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(query_options **)&jarg5; 
  result = (string_array_result *)kuzzle_ms_zrevrangebylex(arg1,arg2,arg3,arg4,arg5);
  *(string_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrevrangebyscore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  query_options *arg5 = (query_options *) 0 ;
  json_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(query_options **)&jarg5; 
  result = (json_array_result *)kuzzle_ms_zrevrangebyscore(arg1,arg2,arg3,arg4,arg5);
  *(json_array_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zrevrank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (int_result *)kuzzle_ms_zrevrank(arg1,arg2,arg3,arg4);
  *(int_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zscan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (json_result *)kuzzle_ms_zscan(arg1,arg2,arg3,arg4);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1ms_1zscore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  double_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(query_options **)&jarg4; 
  result = (double_result *)kuzzle_ms_zscore(arg1,arg2,arg3,arg4);
  *(double_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1new_1options(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (options *)kuzzle_new_options();
  *(options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1query(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  kuzzle_request *arg2 = (kuzzle_request *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  kuzzle_response *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(kuzzle_request **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (kuzzle_response *)kuzzle_query(arg1,arg2,arg3);
  *(kuzzle_response **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_unregisterRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  room *arg1 = (room *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  unregisterRoom(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1new_1room(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  room *arg1 = (room *) 0 ;
  collection *arg2 = (collection *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  room_options *arg4 = (room_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(room **)&jarg1; 
  arg2 = *(collection **)&jarg2; 
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(room_options **)&jarg4; 
  room_new_room(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  room *arg1 = (room *) 0 ;
  int_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  result = (int_result *)room_count(arg1);
  *(int_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1on_1done(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  room *arg1 = (room *) 0 ;
  kuzzle_subscribe_listener arg2 = (kuzzle_subscribe_listener) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  arg2 = *(kuzzle_subscribe_listener *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  room_on_done(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1subscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  room *arg1 = (room *) 0 ;
  kuzzle_notification_listener arg2 = (kuzzle_notification_listener) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  arg2 = *(kuzzle_notification_listener *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  room_subscribe(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_room_1unsubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  room *arg1 = (room *) 0 ;
  void_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room **)&jarg1; 
  result = (void_result *)room_unsubscribe(arg1);
  *(void_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1list_1collections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  collection_entry_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (collection_entry_result *)kuzzle_list_collections(arg1,arg2,arg3);
  *(collection_entry_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1list_1indexes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_array_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_array_result *)kuzzle_list_indexes(arg1,arg2);
  *(string_array_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1auto_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (bool_result *)kuzzle_get_auto_refresh(arg1,arg2,arg3);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1search_1result_1fetch_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  search_result *arg1 = (search_result *) 0 ;
  search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(search_result **)&jarg1; 
  result = (search_result *)kuzzle_search_result_fetch_next(arg1);
  *(search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1new_1profile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  policy *arg3 = (policy *) 0 ;
  size_t arg4 ;
  profile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(policy **)&jarg3; 
  arg4 = (size_t)jarg4; 
  result = (profile *)kuzzle_security_new_profile(arg1,arg2,arg3,arg4);
  *(profile **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1destroy_1profile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  profile *arg1 = (profile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(profile **)&jarg1; 
  kuzzle_security_destroy_profile(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1fetch_1profile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  profile_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (profile_result *)kuzzle_security_fetch_profile(arg1,arg2,arg3);
  *(profile_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1scroll_1profiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_profiles_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (search_profiles_result *)kuzzle_security_scroll_profiles(arg1,arg2,arg3);
  *(search_profiles_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1search_1profiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_profiles_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (search_profiles_result *)kuzzle_security_search_profiles(arg1,arg2,arg3);
  *(search_profiles_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1profile_1add_1policy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  profile *arg1 = (profile *) 0 ;
  policy *arg2 = (policy *) 0 ;
  profile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(profile **)&jarg1; 
  arg2 = *(policy **)&jarg2; 
  result = (profile *)kuzzle_security_profile_add_policy(arg1,arg2);
  *(profile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1profile_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  profile *arg1 = (profile *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(profile **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_security_profile_delete(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1profile_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  profile *arg1 = (profile *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  profile_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(profile **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (profile_result *)kuzzle_security_profile_save(arg1,arg2);
  *(profile_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1new_1role(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  role *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object **)&jarg3; 
  result = (role *)kuzzle_security_new_role(arg1,arg2,arg3);
  *(role **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1destroy_1role(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  role *arg1 = (role *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(role **)&jarg1; 
  kuzzle_security_destroy_role(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1fetch_1role(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  role_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (role_result *)kuzzle_security_fetch_role(arg1,arg2,arg3);
  *(role_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1search_1roles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_roles_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (search_roles_result *)kuzzle_security_search_roles(arg1,arg2,arg3);
  *(search_roles_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1role_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  role *arg1 = (role *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(role **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_security_role_delete(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1role_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  role *arg1 = (role *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  role_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(role **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (role_result *)kuzzle_security_role_save(arg1,arg2);
  *(role_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1new_1user(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  user_data *arg3 = (user_data *) 0 ;
  user *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(user_data **)&jarg3; 
  result = (user *)kuzzle_security_new_user(arg1,arg2,arg3);
  *(user **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1destroy_1user(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  user *arg1 = (user *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(user **)&jarg1; 
  kuzzle_security_destroy_user(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1fetch_1user(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  user_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (user_result *)kuzzle_security_fetch_user(arg1,arg2,arg3);
  *(user_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1scroll_1users(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_users_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (search_users_result *)kuzzle_security_scroll_users(arg1,arg2,arg3);
  *(search_users_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1search_1users(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzle *arg1 = (kuzzle *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_users_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzle **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (search_users_result *)kuzzle_security_search_users(arg1,arg2,arg3);
  *(search_users_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  user_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (user_result *)kuzzle_security_user_create(arg1,arg2);
  *(user_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1create_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(user **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (json_result *)kuzzle_security_user_create_credentials(arg1,arg2,arg3,arg4);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1create_1with_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  user_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  result = (user_result *)kuzzle_security_user_create_with_credentials(arg1,arg2,arg3);
  *(user_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_security_user_delete(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1delete_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(user **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (bool_result *)kuzzle_security_user_delete_credentials(arg1,arg2,arg3);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1get_1credentials_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(user **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (json_result *)kuzzle_security_user_get_credentials_info(arg1,arg2,arg3);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1get_1profiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  profiles_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (profiles_result *)kuzzle_security_user_get_profiles(arg1,arg2);
  *(profiles_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1get_1rights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  user_rights_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (user_rights_result *)kuzzle_security_user_get_rights(arg1,arg2);
  *(user_rights_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1has_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  char *arg2 = (char *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(user **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(query_options **)&jarg3; 
  result = (bool_result *)kuzzle_security_user_has_credentials(arg1,arg2,arg3);
  *(bool_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1user_1replace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  user_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(user **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (user_result *)kuzzle_security_user_replace(arg1,arg2);
  *(user_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1update_1credentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  user *arg1 = (user *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  json_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(user **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  result = (json_result *)kuzzle_security_update_credentials(arg1,arg2,arg3,arg4);
  *(json_result **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1security_1is_1action_1allowed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  user_right **arg1 = (user_right **) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(user_right ***)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (unsigned int)kuzzle_security_is_action_allowed(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jlong)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_unregisterServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  server *arg1 = (server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(server **)&jarg1; 
  unregisterServer(arg1);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1new_1server(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  server *arg1 = (server *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  kuzzle_new_server(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1admin_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (bool_result *)kuzzle_admin_exists(arg1,arg2);
  *(bool_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1all_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_get_all_stats(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  time_t arg2 ;
  time_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  time_t *argp2 ;
  time_t *argp3 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(server **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(time_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(query_options **)&jarg4; 
  result = (string_result *)kuzzle_get_stats(arg1,arg2,arg3,arg4);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1last_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_get_last_stats(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1get_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_get_config(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  string_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (string_result *)kuzzle_info(arg1,arg2);
  *(string_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_kuzzle_1now(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  server *arg1 = (server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  date_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  result = (date_result *)kuzzle_now(arg1,arg2);
  *(date_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1NotificationListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::NotificationListener *arg1 = (kuzzleio::NotificationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::NotificationListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_NotificationListener_1onMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzleio::NotificationListener *arg1 = (kuzzleio::NotificationListener *) 0 ;
  notification_result *arg2 = (notification_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::NotificationListener **)&jarg1; 
  arg2 = *(notification_result **)&jarg2; 
  ((kuzzleio::NotificationListener const *)arg1)->onMessage(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1NotificationListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::NotificationListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::NotificationListener *)new SwigDirector_NotificationListener(jenv);
  *(kuzzleio::NotificationListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_NotificationListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  kuzzleio::NotificationListener *obj = *((kuzzleio::NotificationListener **)&objarg);
  (void)jcls;
  SwigDirector_NotificationListener *director = dynamic_cast<SwigDirector_NotificationListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_NotificationListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  kuzzleio::NotificationListener *obj = *((kuzzleio::NotificationListener **)&objarg);
  SwigDirector_NotificationListener *director = dynamic_cast<SwigDirector_NotificationListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1EventListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::EventListener *arg1 = (kuzzleio::EventListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::EventListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_EventListener_1trigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzleio::EventListener *arg1 = (kuzzleio::EventListener *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::EventListener **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  ((kuzzleio::EventListener const *)arg1)->trigger(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1EventListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::EventListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::EventListener *)new SwigDirector_EventListener(jenv);
  *(kuzzleio::EventListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_EventListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  kuzzleio::EventListener *obj = *((kuzzleio::EventListener **)&objarg);
  (void)jcls;
  SwigDirector_EventListener *director = dynamic_cast<SwigDirector_EventListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_EventListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  kuzzleio::EventListener *obj = *((kuzzleio::EventListener **)&objarg);
  SwigDirector_EventListener *director = dynamic_cast<SwigDirector_EventListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1SubscribeListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::SubscribeListener *arg1 = (kuzzleio::SubscribeListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::SubscribeListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SubscribeListener_1onSubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzleio::SubscribeListener *arg1 = (kuzzleio::SubscribeListener *) 0 ;
  room_result *arg2 = (room_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::SubscribeListener **)&jarg1; 
  arg2 = *(room_result **)&jarg2; 
  ((kuzzleio::SubscribeListener const *)arg1)->onSubscribe(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1SubscribeListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::SubscribeListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::SubscribeListener *)new SwigDirector_SubscribeListener(jenv);
  *(kuzzleio::SubscribeListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SubscribeListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  kuzzleio::SubscribeListener *obj = *((kuzzleio::SubscribeListener **)&objarg);
  (void)jcls;
  SwigDirector_SubscribeListener *director = dynamic_cast<SwigDirector_SubscribeListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_SubscribeListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  kuzzleio::SubscribeListener *obj = *((kuzzleio::SubscribeListener **)&objarg);
  SwigDirector_SubscribeListener *director = dynamic_cast<SwigDirector_SubscribeListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_PARTIAL_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(206);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_BAD_1REQUEST_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(400);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_UNAUTHORIZED_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(401);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_FORBIDDEN_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(403);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_NOT_1FOUND_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(404);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_PRECONDITION_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(412);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_SIZE_1LIMIT_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(413);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_INTERNAL_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(500);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_SERVICE_1UNAVAILABLE_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(503);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_GATEWAY_1TIMEOUT_1EXCEPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(504);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1KuzzleException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  kuzzleio::KuzzleException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (kuzzleio::KuzzleException *)new kuzzleio::KuzzleException(arg1,(std::string const &)*arg2);
  *(kuzzleio::KuzzleException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1KuzzleException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  kuzzleio::KuzzleException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (kuzzleio::KuzzleException *)new kuzzleio::KuzzleException(arg1);
  *(kuzzleio::KuzzleException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1KuzzleException_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::KuzzleException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::KuzzleException *)new kuzzleio::KuzzleException();
  *(kuzzleio::KuzzleException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1KuzzleException_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::KuzzleException *arg1 = 0 ;
  kuzzleio::KuzzleException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::KuzzleException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::KuzzleException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::KuzzleException *)new kuzzleio::KuzzleException((kuzzleio::KuzzleException const &)*arg1);
  *(kuzzleio::KuzzleException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1KuzzleException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::KuzzleException *arg1 = (kuzzleio::KuzzleException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::KuzzleException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleException_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::KuzzleException *arg1 = (kuzzleio::KuzzleException *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::KuzzleException **)&jarg1; 
  result = ((kuzzleio::KuzzleException const *)arg1)->getMessage();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1BadRequestException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::BadRequestException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::BadRequestException *)new kuzzleio::BadRequestException((std::string const &)*arg1);
  *(kuzzleio::BadRequestException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1BadRequestException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::BadRequestException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::BadRequestException *)new kuzzleio::BadRequestException();
  *(kuzzleio::BadRequestException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1BadRequestException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::BadRequestException *arg1 = 0 ;
  kuzzleio::BadRequestException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::BadRequestException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::BadRequestException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::BadRequestException *)new kuzzleio::BadRequestException((kuzzleio::BadRequestException const &)*arg1);
  *(kuzzleio::BadRequestException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1BadRequestException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::BadRequestException *arg1 = (kuzzleio::BadRequestException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::BadRequestException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1ForbiddenException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::ForbiddenException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::ForbiddenException *)new kuzzleio::ForbiddenException((std::string const &)*arg1);
  *(kuzzleio::ForbiddenException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1ForbiddenException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::ForbiddenException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::ForbiddenException *)new kuzzleio::ForbiddenException();
  *(kuzzleio::ForbiddenException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1ForbiddenException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::ForbiddenException *arg1 = 0 ;
  kuzzleio::ForbiddenException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::ForbiddenException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::ForbiddenException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::ForbiddenException *)new kuzzleio::ForbiddenException((kuzzleio::ForbiddenException const &)*arg1);
  *(kuzzleio::ForbiddenException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1ForbiddenException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::ForbiddenException *arg1 = (kuzzleio::ForbiddenException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::ForbiddenException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1GatewayTimeoutException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::GatewayTimeoutException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::GatewayTimeoutException *)new kuzzleio::GatewayTimeoutException((std::string const &)*arg1);
  *(kuzzleio::GatewayTimeoutException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1GatewayTimeoutException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::GatewayTimeoutException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::GatewayTimeoutException *)new kuzzleio::GatewayTimeoutException();
  *(kuzzleio::GatewayTimeoutException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1GatewayTimeoutException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::GatewayTimeoutException *arg1 = 0 ;
  kuzzleio::GatewayTimeoutException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::GatewayTimeoutException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::GatewayTimeoutException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::GatewayTimeoutException *)new kuzzleio::GatewayTimeoutException((kuzzleio::GatewayTimeoutException const &)*arg1);
  *(kuzzleio::GatewayTimeoutException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1GatewayTimeoutException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::GatewayTimeoutException *arg1 = (kuzzleio::GatewayTimeoutException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::GatewayTimeoutException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1InternalException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::InternalException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::InternalException *)new kuzzleio::InternalException((std::string const &)*arg1);
  *(kuzzleio::InternalException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1InternalException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::InternalException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::InternalException *)new kuzzleio::InternalException();
  *(kuzzleio::InternalException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1InternalException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::InternalException *arg1 = 0 ;
  kuzzleio::InternalException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::InternalException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::InternalException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::InternalException *)new kuzzleio::InternalException((kuzzleio::InternalException const &)*arg1);
  *(kuzzleio::InternalException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1InternalException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::InternalException *arg1 = (kuzzleio::InternalException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::InternalException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1NotFoundException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::NotFoundException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::NotFoundException *)new kuzzleio::NotFoundException((std::string const &)*arg1);
  *(kuzzleio::NotFoundException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1NotFoundException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::NotFoundException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::NotFoundException *)new kuzzleio::NotFoundException();
  *(kuzzleio::NotFoundException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1NotFoundException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::NotFoundException *arg1 = 0 ;
  kuzzleio::NotFoundException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::NotFoundException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::NotFoundException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::NotFoundException *)new kuzzleio::NotFoundException((kuzzleio::NotFoundException const &)*arg1);
  *(kuzzleio::NotFoundException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1NotFoundException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::NotFoundException *arg1 = (kuzzleio::NotFoundException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::NotFoundException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1PartialException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::PartialException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::PartialException *)new kuzzleio::PartialException((std::string const &)*arg1);
  *(kuzzleio::PartialException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1PartialException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::PartialException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::PartialException *)new kuzzleio::PartialException();
  *(kuzzleio::PartialException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1PartialException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::PartialException *arg1 = 0 ;
  kuzzleio::PartialException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::PartialException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::PartialException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::PartialException *)new kuzzleio::PartialException((kuzzleio::PartialException const &)*arg1);
  *(kuzzleio::PartialException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1PartialException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::PartialException *arg1 = (kuzzleio::PartialException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::PartialException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1PreconditionException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::PreconditionException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::PreconditionException *)new kuzzleio::PreconditionException((std::string const &)*arg1);
  *(kuzzleio::PreconditionException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1PreconditionException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::PreconditionException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::PreconditionException *)new kuzzleio::PreconditionException();
  *(kuzzleio::PreconditionException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1PreconditionException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::PreconditionException *arg1 = 0 ;
  kuzzleio::PreconditionException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::PreconditionException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::PreconditionException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::PreconditionException *)new kuzzleio::PreconditionException((kuzzleio::PreconditionException const &)*arg1);
  *(kuzzleio::PreconditionException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1PreconditionException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::PreconditionException *arg1 = (kuzzleio::PreconditionException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::PreconditionException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1ServiceUnavailableException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::ServiceUnavailableException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::ServiceUnavailableException *)new kuzzleio::ServiceUnavailableException((std::string const &)*arg1);
  *(kuzzleio::ServiceUnavailableException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1ServiceUnavailableException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::ServiceUnavailableException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::ServiceUnavailableException *)new kuzzleio::ServiceUnavailableException();
  *(kuzzleio::ServiceUnavailableException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1ServiceUnavailableException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::ServiceUnavailableException *arg1 = 0 ;
  kuzzleio::ServiceUnavailableException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::ServiceUnavailableException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::ServiceUnavailableException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::ServiceUnavailableException *)new kuzzleio::ServiceUnavailableException((kuzzleio::ServiceUnavailableException const &)*arg1);
  *(kuzzleio::ServiceUnavailableException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1ServiceUnavailableException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::ServiceUnavailableException *arg1 = (kuzzleio::ServiceUnavailableException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::ServiceUnavailableException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1SizeLimitException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::SizeLimitException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::SizeLimitException *)new kuzzleio::SizeLimitException((std::string const &)*arg1);
  *(kuzzleio::SizeLimitException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1SizeLimitException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::SizeLimitException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::SizeLimitException *)new kuzzleio::SizeLimitException();
  *(kuzzleio::SizeLimitException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1SizeLimitException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::SizeLimitException *arg1 = 0 ;
  kuzzleio::SizeLimitException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::SizeLimitException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::SizeLimitException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::SizeLimitException *)new kuzzleio::SizeLimitException((kuzzleio::SizeLimitException const &)*arg1);
  *(kuzzleio::SizeLimitException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1SizeLimitException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::SizeLimitException *arg1 = (kuzzleio::SizeLimitException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::SizeLimitException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1UnauthorizedException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::UnauthorizedException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::UnauthorizedException *)new kuzzleio::UnauthorizedException((std::string const &)*arg1);
  *(kuzzleio::UnauthorizedException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1UnauthorizedException_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kuzzleio::UnauthorizedException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kuzzleio::UnauthorizedException *)new kuzzleio::UnauthorizedException();
  *(kuzzleio::UnauthorizedException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1UnauthorizedException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::UnauthorizedException *arg1 = 0 ;
  kuzzleio::UnauthorizedException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::UnauthorizedException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kuzzleio::UnauthorizedException const & reference is null");
    return 0;
  } 
  result = (kuzzleio::UnauthorizedException *)new kuzzleio::UnauthorizedException((kuzzleio::UnauthorizedException const &)*arg1);
  *(kuzzleio::UnauthorizedException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1UnauthorizedException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::UnauthorizedException *arg1 = (kuzzleio::UnauthorizedException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::UnauthorizedException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleEventEmitter_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::KuzzleEventEmitter *arg1 = (kuzzleio::KuzzleEventEmitter *) 0 ;
  Event arg2 ;
  kuzzleio::EventListener *arg3 = (kuzzleio::EventListener *) 0 ;
  kuzzleio::KuzzleEventEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::KuzzleEventEmitter **)&jarg1; 
  arg2 = (Event)jarg2; 
  arg3 = *(kuzzleio::EventListener **)&jarg3; 
  result = (kuzzleio::KuzzleEventEmitter *)(arg1)->addListener(arg2,arg3);
  *(kuzzleio::KuzzleEventEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleEventEmitter_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::KuzzleEventEmitter *arg1 = (kuzzleio::KuzzleEventEmitter *) 0 ;
  Event arg2 ;
  kuzzleio::EventListener *arg3 = (kuzzleio::EventListener *) 0 ;
  kuzzleio::KuzzleEventEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::KuzzleEventEmitter **)&jarg1; 
  arg2 = (Event)jarg2; 
  arg3 = *(kuzzleio::EventListener **)&jarg3; 
  result = (kuzzleio::KuzzleEventEmitter *)(arg1)->removeListener(arg2,arg3);
  *(kuzzleio::KuzzleEventEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleEventEmitter_1removeAllListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  kuzzleio::KuzzleEventEmitter *arg1 = (kuzzleio::KuzzleEventEmitter *) 0 ;
  Event arg2 ;
  kuzzleio::KuzzleEventEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::KuzzleEventEmitter **)&jarg1; 
  arg2 = (Event)jarg2; 
  result = (kuzzleio::KuzzleEventEmitter *)(arg1)->removeAllListeners(arg2);
  *(kuzzleio::KuzzleEventEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleEventEmitter_1once(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::KuzzleEventEmitter *arg1 = (kuzzleio::KuzzleEventEmitter *) 0 ;
  Event arg2 ;
  kuzzleio::EventListener *arg3 = (kuzzleio::EventListener *) 0 ;
  kuzzleio::KuzzleEventEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::KuzzleEventEmitter **)&jarg1; 
  arg2 = (Event)jarg2; 
  arg3 = *(kuzzleio::EventListener **)&jarg3; 
  result = (kuzzleio::KuzzleEventEmitter *)(arg1)->once(arg2,arg3);
  *(kuzzleio::KuzzleEventEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_KuzzleEventEmitter_1listenerCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  kuzzleio::KuzzleEventEmitter *arg1 = (kuzzleio::KuzzleEventEmitter *) 0 ;
  Event arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::KuzzleEventEmitter **)&jarg1; 
  arg2 = (Event)jarg2; 
  result = (int)(arg1)->listenerCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1KuzzleEventEmitter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::KuzzleEventEmitter *arg1 = (kuzzleio::KuzzleEventEmitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::KuzzleEventEmitter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1_1kuzzle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzle *arg2 = (kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(kuzzle **)&jarg2; 
  if (arg1) (arg1)->_kuzzle = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1_1kuzzle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (kuzzle *) ((arg1)->_kuzzle);
  *(kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Kuzzle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  options *arg2 = (options *) 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(options **)&jarg2; 
  result = (kuzzleio::Kuzzle *)new kuzzleio::Kuzzle((std::string const &)*arg1,arg2);
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Kuzzle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kuzzleio::Kuzzle *)new kuzzleio::Kuzzle((std::string const &)*arg1);
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1Kuzzle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1checkToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  token_validity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (token_validity *)(arg1)->checkToken((std::string const &)*arg2);
  *(token_validity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (char *)(arg1)->connect();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1createMyCredentials_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  try {
    result = (json_object *)(arg1)->createMyCredentials((std::string const &)*arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1createMyCredentials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  try {
    result = (json_object *)(arg1)->createMyCredentials((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1deleteMyCredentials_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (bool)(arg1)->deleteMyCredentials((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1deleteMyCredentials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool)(arg1)->deleteMyCredentials((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getMyCredentials_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (json_object *)(arg1)->getMyCredentials((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getMyCredentials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (json_object *)(arg1)->getMyCredentials((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1updateMyCredentials_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  try {
    result = (json_object *)(arg1)->updateMyCredentials((std::string const &)*arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1updateMyCredentials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  try {
    result = (json_object *)(arg1)->updateMyCredentials((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1validateMyCredentials_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  try {
    result = (bool)(arg1)->validateMyCredentials((std::string const &)*arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1validateMyCredentials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  try {
    result = (bool)(arg1)->validateMyCredentials((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1login_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jstring jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  int arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  arg4 = (int)jarg4; 
  try {
    result = (arg1)->login((std::string const &)*arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1login_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  try {
    result = (arg1)->login((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getAllStatistics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  statistics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (statistics *)(arg1)->getAllStatistics(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(statistics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getAllStatistics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  statistics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  try {
    result = (statistics *)(arg1)->getAllStatistics();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(statistics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getStatistics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  time_t arg2 ;
  time_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  time_t *argp2 ;
  time_t *argp3 ;
  statistics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(time_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(query_options **)&jarg4; 
  try {
    result = (statistics *)(arg1)->getStatistics(arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(statistics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getStatistics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  time_t arg2 ;
  time_t arg3 ;
  time_t *argp2 ;
  time_t *argp3 ;
  statistics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(time_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg3 = *argp3; 
  try {
    result = (statistics *)(arg1)->getStatistics(arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(statistics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getAutoRefresh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (bool)(arg1)->getAutoRefresh((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getAutoRefresh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool)(arg1)->getAutoRefresh((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getJwt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (arg1)->getJwt();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getMyRights_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (json_object *)(arg1)->getMyRights(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getMyRights_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  try {
    result = (json_object *)(arg1)->getMyRights();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1listCollections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  collection_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (collection_entry *)(arg1)->listCollections((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(collection_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1listCollections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  collection_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (collection_entry *)(arg1)->listCollections((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(collection_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1listIndexes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (arg1)->listIndexes(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1listIndexes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  try {
    result = (arg1)->listIndexes();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  (arg1)->disconnect();
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1logout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  (arg1)->logout();
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1query_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzle_request *arg2 = (kuzzle_request *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  kuzzle_response *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(kuzzle_request **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (kuzzle_response *)(arg1)->query(arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzle_response **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1query_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzle_request *arg2 = (kuzzle_request *) 0 ;
  kuzzle_response *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(kuzzle_request **)&jarg2; 
  try {
    result = (kuzzle_response *)(arg1)->query(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzle_response **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1replayQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (kuzzleio::Kuzzle *)(arg1)->replayQueue();
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1setAutoReplay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  bool arg2 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (kuzzleio::Kuzzle *)(arg1)->setAutoReplay(arg2);
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1setDefaultIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (kuzzleio::Kuzzle *)(arg1)->setDefaultIndex((std::string const &)*arg2);
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1setJwt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (kuzzleio::Kuzzle *)(arg1)->setJwt((std::string const &)*arg2);
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1startQueuing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (kuzzleio::Kuzzle *)(arg1)->startQueuing();
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1stopQueuing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (kuzzleio::Kuzzle *)(arg1)->stopQueuing();
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1unsetJwt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (kuzzleio::Kuzzle *)(arg1)->unsetJwt();
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1updateSelf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  user_data *arg2 = (user_data *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(user_data **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (json_object *)(arg1)->updateSelf(arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1updateSelf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  user_data *arg2 = (user_data *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(user_data **)&jarg2; 
  try {
    result = (json_object *)(arg1)->updateSelf(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1whoAmI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  user *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  try {
    result = (user *)(arg1)->whoAmI();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(user **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1flushQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (kuzzleio::Kuzzle *)(arg1)->flushQueue();
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (json_object *)(arg1)->getVolatile();
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1setVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  kuzzleio::Kuzzle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  result = (kuzzleio::Kuzzle *)(arg1)->setVolatile(arg2);
  *(kuzzleio::Kuzzle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1getListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  SwigValueWrapper< std::map< int,kuzzleio::EventListener * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (arg1)->getListeners();
  *(std::map< int,kuzzleio::EventListener * > **)&jresult = new std::map< int,kuzzleio::EventListener * >((const std::map< int,kuzzleio::EventListener * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  Event arg2 ;
  kuzzleio::EventListener *arg3 = (kuzzleio::EventListener *) 0 ;
  kuzzleio::KuzzleEventEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = (Event)jarg2; 
  arg3 = *(kuzzleio::EventListener **)&jarg3; 
  result = (kuzzleio::KuzzleEventEmitter *)(arg1)->addListener(arg2,arg3);
  *(kuzzleio::KuzzleEventEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  Event arg2 ;
  kuzzleio::EventListener *arg3 = (kuzzleio::EventListener *) 0 ;
  kuzzleio::KuzzleEventEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = (Event)jarg2; 
  arg3 = *(kuzzleio::EventListener **)&jarg3; 
  result = (kuzzleio::KuzzleEventEmitter *)(arg1)->removeListener(arg2,arg3);
  *(kuzzleio::KuzzleEventEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1removeAllListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  Event arg2 ;
  kuzzleio::KuzzleEventEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = (Event)jarg2; 
  result = (kuzzleio::KuzzleEventEmitter *)(arg1)->removeAllListeners(arg2);
  *(kuzzleio::KuzzleEventEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1once(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  Event arg2 ;
  kuzzleio::EventListener *arg3 = (kuzzleio::EventListener *) 0 ;
  kuzzleio::KuzzleEventEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = (Event)jarg2; 
  arg3 = *(kuzzleio::EventListener **)&jarg3; 
  result = (kuzzleio::KuzzleEventEmitter *)(arg1)->once(arg2,arg3);
  *(kuzzleio::KuzzleEventEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1listenerCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  Event arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  arg2 = (Event)jarg2; 
  result = (int)(arg1)->listenerCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1_1collection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  collection *arg2 = (collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(collection **)&jarg2; 
  if (arg1) (arg1)->_collection = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1_1collection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  result = (collection *) ((arg1)->_collection);
  *(collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1_1listener_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  kuzzleio::NotificationListener *arg2 = (kuzzleio::NotificationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(kuzzleio::NotificationListener **)&jarg2; 
  if (arg1) (arg1)->_listener_instance = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1_1listener_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  kuzzleio::NotificationListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  result = (kuzzleio::NotificationListener *) ((arg1)->_listener_instance);
  *(kuzzleio::NotificationListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Collection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  kuzzleio::Collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (kuzzleio::Collection *)new kuzzleio::Collection(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(kuzzleio::Collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1Collection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (int)(arg1)->count(arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  try {
    result = (int)(arg1)->count(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1createDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  kuzzleio::Document *arg2 = (kuzzleio::Document *) 0 ;
  std::string *arg3 = 0 ;
  query_options *arg4 = (query_options *) 0 ;
  kuzzleio::Collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(kuzzleio::Document **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(query_options **)&jarg4; 
  try {
    result = (kuzzleio::Collection *)(arg1)->createDocument(arg2,(std::string const &)*arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1createDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  kuzzleio::Document *arg2 = (kuzzleio::Document *) 0 ;
  std::string *arg3 = 0 ;
  kuzzleio::Collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(kuzzleio::Document **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = (kuzzleio::Collection *)(arg1)->createDocument(arg2,(std::string const &)*arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1createDocument_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  kuzzleio::Document *arg2 = (kuzzleio::Document *) 0 ;
  kuzzleio::Collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(kuzzleio::Document **)&jarg2; 
  try {
    result = (kuzzleio::Collection *)(arg1)->createDocument(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1deleteDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (arg1)->deleteDocument((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1deleteDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->deleteDocument((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1fetchDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (kuzzleio::Document *)(arg1)->fetchDocument((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1fetchDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (kuzzleio::Document *)(arg1)->fetchDocument((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mCreateDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< kuzzleio::Document * > *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< kuzzleio::Document * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< kuzzleio::Document * > & reference is null");
    return 0;
  } 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (arg1)->mCreateDocument(*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mCreateDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< kuzzleio::Document * > *arg2 = 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< kuzzleio::Document * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< kuzzleio::Document * > & reference is null");
    return 0;
  } 
  try {
    result = (arg1)->mCreateDocument(*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mCreateOrReplaceDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< kuzzleio::Document * > *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< kuzzleio::Document * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< kuzzleio::Document * > & reference is null");
    return 0;
  } 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (arg1)->mCreateOrReplaceDocument(*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mCreateOrReplaceDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< kuzzleio::Document * > *arg2 = 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< kuzzleio::Document * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< kuzzleio::Document * > & reference is null");
    return 0;
  } 
  try {
    result = (arg1)->mCreateOrReplaceDocument(*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mDeleteDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (arg1)->mDeleteDocument(*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mDeleteDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  try {
    result = (arg1)->mDeleteDocument(*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mGetDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (arg1)->mGetDocument(*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mGetDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  try {
    result = (arg1)->mGetDocument(*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mReplaceDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< kuzzleio::Document * > *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< kuzzleio::Document * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< kuzzleio::Document * > & reference is null");
    return 0;
  } 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (arg1)->mReplaceDocument(*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mReplaceDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< kuzzleio::Document * > *arg2 = 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< kuzzleio::Document * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< kuzzleio::Document * > & reference is null");
    return 0;
  } 
  try {
    result = (arg1)->mReplaceDocument(*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mUpdateDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< kuzzleio::Document * > *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< kuzzleio::Document * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< kuzzleio::Document * > & reference is null");
    return 0;
  } 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (arg1)->mUpdateDocument(*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1mUpdateDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::vector< kuzzleio::Document * > *arg2 = 0 ;
  std::vector< kuzzleio::Document * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(std::vector< kuzzleio::Document * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< kuzzleio::Document * > & reference is null");
    return 0;
  } 
  try {
    result = (arg1)->mUpdateDocument(*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< kuzzleio::Document * > **)&jresult = new std::vector< kuzzleio::Document * >((const std::vector< kuzzleio::Document * > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1publishMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (bool)(arg1)->publishMessage(arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1publishMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  try {
    result = (bool)(arg1)->publishMessage(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1replaceDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  kuzzleio::Document *arg3 = (kuzzleio::Document *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(kuzzleio::Document **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  try {
    result = (kuzzleio::Document *)(arg1)->replaceDocument((std::string const &)*arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1replaceDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  kuzzleio::Document *arg3 = (kuzzleio::Document *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(kuzzleio::Document **)&jarg3; 
  try {
    result = (kuzzleio::Document *)(arg1)->replaceDocument((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1scroll_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (search_result *)(arg1)->scroll((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1scroll_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (search_result *)(arg1)->scroll((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  query_options *arg3 = (query_options *) 0 ;
  search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(query_options **)&jarg3; 
  try {
    result = (search_result *)(arg1)->search(arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1search_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  search_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  try {
    result = (search_result *)(arg1)->search(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(search_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1subscribe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  kuzzleio::NotificationListener *arg3 = (kuzzleio::NotificationListener *) 0 ;
  room_options *arg4 = (room_options *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(kuzzleio::NotificationListener **)&jarg3; 
  arg4 = *(room_options **)&jarg4; 
  try {
    result = (kuzzleio::Room *)(arg1)->subscribe(arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1subscribe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  search_filters *arg2 = (search_filters *) 0 ;
  kuzzleio::NotificationListener *arg3 = (kuzzleio::NotificationListener *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(search_filters **)&jarg2; 
  arg3 = *(kuzzleio::NotificationListener **)&jarg3; 
  try {
    result = (kuzzleio::Room *)(arg1)->subscribe(arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1getListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  kuzzleio::NotificationListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  result = (kuzzleio::NotificationListener *)(arg1)->getListener();
  *(kuzzleio::NotificationListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1updateDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  kuzzleio::Document *arg3 = (kuzzleio::Document *) 0 ;
  query_options *arg4 = (query_options *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(kuzzleio::Document **)&jarg3; 
  arg4 = *(query_options **)&jarg4; 
  try {
    result = (kuzzleio::Document *)(arg1)->updateDocument((std::string const &)*arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Collection_1updateDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  kuzzleio::Document *arg3 = (kuzzleio::Document *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(kuzzleio::Document **)&jarg3; 
  try {
    result = (kuzzleio::Document *)(arg1)->updateDocument((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Room_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  room_options *arg3 = (room_options *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  arg3 = *(room_options **)&jarg3; 
  result = (kuzzleio::Room *)new kuzzleio::Room(arg1,arg2,arg3);
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Room_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  result = (kuzzleio::Room *)new kuzzleio::Room(arg1,arg2);
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Room_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  result = (kuzzleio::Room *)new kuzzleio::Room(arg1);
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Room_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  room *arg1 = (room *) 0 ;
  kuzzleio::SubscribeListener *arg2 = (kuzzleio::SubscribeListener *) 0 ;
  kuzzleio::NotificationListener *arg3 = (kuzzleio::NotificationListener *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(room **)&jarg1; 
  arg2 = *(kuzzleio::SubscribeListener **)&jarg2; 
  arg3 = *(kuzzleio::NotificationListener **)&jarg3; 
  result = (kuzzleio::Room *)new kuzzleio::Room(arg1,arg2,arg3);
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1Room(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::Room *arg1 = (kuzzleio::Room *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::Room **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_Room_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kuzzleio::Room *arg1 = (kuzzleio::Room *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Room **)&jarg1; 
  try {
    result = (int)(arg1)->count();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Room_1getSubscribeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Room *arg1 = (kuzzleio::Room *) 0 ;
  kuzzleio::SubscribeListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Room **)&jarg1; 
  result = (kuzzleio::SubscribeListener *)(arg1)->getSubscribeListener();
  *(kuzzleio::SubscribeListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Room_1getNotificationListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Room *arg1 = (kuzzleio::Room *) 0 ;
  kuzzleio::NotificationListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Room **)&jarg1; 
  result = (kuzzleio::NotificationListener *)(arg1)->getNotificationListener();
  *(kuzzleio::NotificationListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Room_1onDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Room *arg1 = (kuzzleio::Room *) 0 ;
  kuzzleio::SubscribeListener *arg2 = (kuzzleio::SubscribeListener *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Room **)&jarg1; 
  arg2 = *(kuzzleio::SubscribeListener **)&jarg2; 
  result = (kuzzleio::Room *)(arg1)->onDone(arg2);
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Room_1subscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Room *arg1 = (kuzzleio::Room *) 0 ;
  kuzzleio::NotificationListener *arg2 = (kuzzleio::NotificationListener *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Room **)&jarg1; 
  arg2 = *(kuzzleio::NotificationListener **)&jarg2; 
  result = (kuzzleio::Room *)(arg1)->subscribe(arg2);
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Room_1unsubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzleio::Room *arg1 = (kuzzleio::Room *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Room **)&jarg1; 
  try {
    (arg1)->unsubscribe();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return ; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1_1document_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  document *arg2 = (document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(document **)&jarg2; 
  if (arg1) (arg1)->_document = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1_1document_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  result = (document *) ((arg1)->_document);
  *(document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Document_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  json_object *arg3 = (json_object *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(json_object **)&jarg3; 
  try {
    result = (kuzzleio::Document *)new kuzzleio::Document(arg1,(std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Document_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  std::string *arg2 = 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (kuzzleio::Document *)new kuzzleio::Document(arg1,(std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Document_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Collection *arg1 = (kuzzleio::Collection *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Collection **)&jarg1; 
  try {
    result = (kuzzleio::Document *)new kuzzleio::Document(arg1);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1Document(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1delete_1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (arg1)->delete_(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1delete_1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  try {
    result = (arg1)->delete_();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (bool)(arg1)->exists(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  try {
    result = (bool)(arg1)->exists();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1publish_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (bool)(arg1)->publish(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1publish_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  try {
    result = (bool)(arg1)->publish();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1refresh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (kuzzleio::Document *)(arg1)->refresh(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1refresh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  try {
    result = (kuzzleio::Document *)(arg1)->refresh();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1save_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (kuzzleio::Document *)(arg1)->save(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1save_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  try {
    result = (kuzzleio::Document *)(arg1)->save();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1setContent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  bool arg3 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (kuzzleio::Document *)(arg1)->setContent(arg2,arg3);
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1setContent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  json_object *arg2 = (json_object *) 0 ;
  kuzzleio::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(json_object **)&jarg2; 
  result = (kuzzleio::Document *)(arg1)->setContent(arg2);
  *(kuzzleio::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1getContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  result = (json_object *)(arg1)->getContent();
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1subscribe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  kuzzleio::NotificationListener *arg2 = (kuzzleio::NotificationListener *) 0 ;
  room_options *arg3 = (room_options *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(kuzzleio::NotificationListener **)&jarg2; 
  arg3 = *(room_options **)&jarg3; 
  result = (kuzzleio::Room *)(arg1)->subscribe(arg2,arg3);
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1subscribe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  kuzzleio::NotificationListener *arg2 = (kuzzleio::NotificationListener *) 0 ;
  kuzzleio::Room *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  arg2 = *(kuzzleio::NotificationListener **)&jarg2; 
  result = (kuzzleio::Room *)(arg1)->subscribe(arg2);
  *(kuzzleio::Room **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Document_1getListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Document *arg1 = (kuzzleio::Document *) 0 ;
  kuzzleio::NotificationListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Document **)&jarg1; 
  result = (kuzzleio::NotificationListener *)(arg1)->getListener();
  *(kuzzleio::NotificationListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzleio::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (kuzzleio::Index *)new kuzzleio::Index(arg1);
  *(kuzzleio::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->create((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return ; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1delete_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->delete_((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return ; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1mDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  try {
    result = (arg1)->mDelete((std::vector< std::string > const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool)(arg1)->exists((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->refresh((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return ; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1refreshInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  try {
    (arg1)->refreshInternal();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return ; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1setAutoRefresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setAutoRefresh((std::string const &)*arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return ; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1getAutoRefresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool)(arg1)->getAutoRefresh((std::string const &)*arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Index_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::Index *arg1 = (kuzzleio::Index *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Index **)&jarg1; 
  try {
    result = (arg1)->list();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1Server(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Kuzzle *arg1 = (kuzzleio::Kuzzle *) 0 ;
  kuzzleio::Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Kuzzle **)&jarg1; 
  result = (kuzzleio::Server *)new kuzzleio::Server(arg1);
  *(kuzzleio::Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1Server(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1adminExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (bool)(arg1)->adminExists(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1getAllStats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (arg1)->getAllStats(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1getAllStats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  try {
    result = (arg1)->getAllStats();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1getStats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  time_t arg2 ;
  time_t arg3 ;
  query_options *arg4 = (query_options *) 0 ;
  time_t *argp2 ;
  time_t *argp3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(time_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(query_options **)&jarg4; 
  try {
    result = (arg1)->getStats(arg2,arg3,arg4);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1getStats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  time_t arg2 ;
  time_t arg3 ;
  time_t *argp2 ;
  time_t *argp3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(time_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg3 = *argp3; 
  try {
    result = (arg1)->getStats(arg2,arg3);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1getLastStats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (arg1)->getLastStats(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1getLastStats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  try {
    result = (arg1)->getLastStats();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1getConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (arg1)->getConfig(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1getConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  try {
    result = (arg1)->getConfig();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (arg1)->info(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  try {
    result = (arg1)->info();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1_1now_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  query_options *arg2 = (query_options *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  arg2 = *(query_options **)&jarg2; 
  try {
    result = (long long)(arg1)->now(arg2);
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Server_1_1now_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kuzzleio::Server *arg1 = (kuzzleio::Server *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kuzzleio::Server **)&jarg1; 
  try {
    result = (long long)(arg1)->now();
  }
  catch(kuzzleio::BadRequestException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/BadRequestException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ForbiddenException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ForbiddenException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::GatewayTimeoutException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/GatewayTimeoutException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::InternalException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/InternalException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::NotFoundException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/NotFoundException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PartialException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PartialException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::PreconditionException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/PreconditionException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::ServiceUnavailableException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/ServiceUnavailableException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  catch(kuzzleio::SizeLimitException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ kuzzleio::SizeLimitException exception thrown");
    return 0; 
  }
  catch(kuzzleio::UnauthorizedException &_e) {
    {
      (void)_e;
      jclass excpcls = jenv->FindClass("io/kuzzle/sdk/UnauthorizedException");
      if (excpcls) {
        jenv->ThrowNew(excpcls, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1DocumentVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< kuzzleio::Document * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< kuzzleio::Document * > *)new std::vector< kuzzleio::Document * >();
  *(std::vector< kuzzleio::Document * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1DocumentVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< kuzzleio::Document * >::size_type arg1 ;
  std::vector< kuzzleio::Document * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< kuzzleio::Document * >::size_type)jarg1; 
  result = (std::vector< kuzzleio::Document * > *)new std::vector< kuzzleio::Document * >(arg1);
  *(std::vector< kuzzleio::Document * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_DocumentVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  std::vector< kuzzleio::Document * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  result = ((std::vector< kuzzleio::Document * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_DocumentVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  std::vector< kuzzleio::Document * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  result = ((std::vector< kuzzleio::Document * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_DocumentVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  std::vector< kuzzleio::Document * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  arg2 = (std::vector< kuzzleio::Document * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_DocumentVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  result = (bool)((std::vector< kuzzleio::Document * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_DocumentVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_DocumentVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  std::vector< kuzzleio::Document * >::value_type *arg2 = 0 ;
  std::vector< kuzzleio::Document * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  temp2 = *(std::vector< kuzzleio::Document * >::value_type *)&jarg2;
  arg2 = (std::vector< kuzzleio::Document * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< kuzzleio::Document * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_DocumentVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  int arg2 ;
  std::vector< kuzzleio::Document * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< kuzzleio::Document * >::value_type *) &std_vector_Sl_kuzzleio_Document_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< kuzzleio::Document * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_DocumentVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  int arg2 ;
  std::vector< kuzzleio::Document * >::value_type *arg3 = 0 ;
  std::vector< kuzzleio::Document * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< kuzzleio::Document * >::value_type *)&jarg3;
  arg3 = (std::vector< kuzzleio::Document * >::value_type *)&temp3; 
  try {
    std_vector_Sl_kuzzleio_Document_Sm__Sg__set(arg1,arg2,(kuzzleio::Document *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1DocumentVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< kuzzleio::Document * > *arg1 = (std::vector< kuzzleio::Document * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< kuzzleio::Document * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_new_1JsonObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (json_object *)new_json_object();
  *(json_object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_delete_1JsonObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  json_object *arg1 = (json_object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(json_object **)&jarg1; 
  delete_json_object(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1put_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (json_object *)json_object_put__SWIG_0(arg1,arg2,arg3);
  *(json_object **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1put_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (json_object *)json_object_put__SWIG_1(arg1,arg2,arg3);
  *(json_object **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1put_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  result = (json_object *)json_object_put__SWIG_2(arg1,arg2,arg3);
  *(json_object **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1put_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (json_object *)json_object_put__SWIG_3(arg1,arg2,arg3);
  *(json_object **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1put_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *arg3 = (json_object *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(json_object **)&jarg3; 
  result = (json_object *)json_object_put__SWIG_4(arg1,arg2,arg3);
  *(json_object **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)json_object_getString(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1getInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)json_object_getInt(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)json_object_getDouble(arg1,arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1getBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)json_object_getBoolean(arg1,arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_JsonObject_1getJsonObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  json_object *arg1 = (json_object *) 0 ;
  char *arg2 = (char *) 0 ;
  json_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(json_object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (json_object *)json_object_getJsonObject(arg1,arg2);
  *(json_object **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_trigger_1event_1listener(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  int arg1 ;
  json_object *arg2 = (json_object *) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(json_object **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  kuzzleio::trigger_event_listener(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_call_1collection_1cb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  kuzzleio::call_collection_cb(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_call_1cb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  room_result *arg1 = (room_result *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(room_result **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  kuzzleio::call_cb(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_notify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  kuzzleio::notify(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_call_1cb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  notification_result *arg1 = (notification_result *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(notification_result **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  kuzzleio::call_cb(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_BadRequestException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::BadRequestException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_ForbiddenException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::ForbiddenException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_GatewayTimeoutException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::GatewayTimeoutException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_InternalException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::InternalException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_NotFoundException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::NotFoundException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_PartialException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::PartialException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_PreconditionException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::PreconditionException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_ServiceUnavailableException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::ServiceUnavailableException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_SizeLimitException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::SizeLimitException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_UnauthorizedException_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleException **)&baseptr = *(kuzzleio::UnauthorizedException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_kuzzle_sdk_kcoreJNI_Kuzzle_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kuzzleio::KuzzleEventEmitter **)&baseptr = *(kuzzleio::Kuzzle **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_io_kuzzle_sdk_kcoreJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[3] = {
    {
      "SwigDirector_NotificationListener_onMessage", "(Lio/kuzzle/sdk/NotificationListener;J)V" 
    },
    {
      "SwigDirector_EventListener_trigger", "(Lio/kuzzle/sdk/EventListener;J)V" 
    },
    {
      "SwigDirector_SubscribeListener_onSubscribe", "(Lio/kuzzle/sdk/SubscribeListener;J)V" 
    }
  };
  Swig::jclass_kcoreJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_kcoreJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

